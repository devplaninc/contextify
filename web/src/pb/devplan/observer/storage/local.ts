// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.3
// source: devplan/observer/storage/local.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ProcessingItem } from "../types/processing";
import { GitHubRepository } from "../types/repo";

export const protobufPackage = "devplan.observer.storage.local";

export interface LocalStorageData {
  githubRepos: GitHubRepository[];
  processingItems: ProcessingItem[];
}

function createBaseLocalStorageData(): LocalStorageData {
  return { githubRepos: [], processingItems: [] };
}

export const LocalStorageData: MessageFns<LocalStorageData> = {
  encode(message: LocalStorageData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.githubRepos) {
      GitHubRepository.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.processingItems) {
      ProcessingItem.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalStorageData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalStorageData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.githubRepos.push(GitHubRepository.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.processingItems.push(ProcessingItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalStorageData {
    return {
      githubRepos: globalThis.Array.isArray(object?.githubRepos)
        ? object.githubRepos.map((e: any) => GitHubRepository.fromJSON(e))
        : [],
      processingItems: globalThis.Array.isArray(object?.processingItems)
        ? object.processingItems.map((e: any) => ProcessingItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LocalStorageData): unknown {
    const obj: any = {};
    if (message.githubRepos?.length) {
      obj.githubRepos = message.githubRepos.map((e) => GitHubRepository.toJSON(e));
    }
    if (message.processingItems?.length) {
      obj.processingItems = message.processingItems.map((e) => ProcessingItem.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LocalStorageData>): LocalStorageData {
    return LocalStorageData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalStorageData>): LocalStorageData {
    const message = createBaseLocalStorageData();
    message.githubRepos = object.githubRepos?.map((e) => GitHubRepository.fromPartial(e)) || [];
    message.processingItems = object.processingItems?.map((e) => ProcessingItem.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
