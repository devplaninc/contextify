// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.3
// source: dev_observer/api/web/observations.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observation, ObservationKey } from "../types/observations";
import { GitHubRepository } from "../types/repo";

export const protobufPackage = "dev_observer.api.web.observations";

export interface GetObservationsResponse {
  keys: ObservationKey[];
}

export interface GetObservationResponse {
  observation: Observation | undefined;
}

export interface AddGithubRepositoryRequest {
  repo: GitHubRepository | undefined;
}

export interface AddGithubRepositoryResponse {
}

function createBaseGetObservationsResponse(): GetObservationsResponse {
  return { keys: [] };
}

export const GetObservationsResponse: MessageFns<GetObservationsResponse> = {
  encode(message: GetObservationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keys) {
      ObservationKey.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetObservationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetObservationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keys.push(ObservationKey.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetObservationsResponse {
    return {
      keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e: any) => ObservationKey.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetObservationsResponse): unknown {
    const obj: any = {};
    if (message.keys?.length) {
      obj.keys = message.keys.map((e) => ObservationKey.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetObservationsResponse>): GetObservationsResponse {
    return GetObservationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetObservationsResponse>): GetObservationsResponse {
    const message = createBaseGetObservationsResponse();
    message.keys = object.keys?.map((e) => ObservationKey.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetObservationResponse(): GetObservationResponse {
  return { observation: undefined };
}

export const GetObservationResponse: MessageFns<GetObservationResponse> = {
  encode(message: GetObservationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.observation !== undefined) {
      Observation.encode(message.observation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetObservationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetObservationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.observation = Observation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetObservationResponse {
    return { observation: isSet(object.observation) ? Observation.fromJSON(object.observation) : undefined };
  },

  toJSON(message: GetObservationResponse): unknown {
    const obj: any = {};
    if (message.observation !== undefined) {
      obj.observation = Observation.toJSON(message.observation);
    }
    return obj;
  },

  create(base?: DeepPartial<GetObservationResponse>): GetObservationResponse {
    return GetObservationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetObservationResponse>): GetObservationResponse {
    const message = createBaseGetObservationResponse();
    message.observation = (object.observation !== undefined && object.observation !== null)
      ? Observation.fromPartial(object.observation)
      : undefined;
    return message;
  },
};

function createBaseAddGithubRepositoryRequest(): AddGithubRepositoryRequest {
  return { repo: undefined };
}

export const AddGithubRepositoryRequest: MessageFns<AddGithubRepositoryRequest> = {
  encode(message: AddGithubRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repo !== undefined) {
      GitHubRepository.encode(message.repo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGithubRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGithubRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repo = GitHubRepository.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddGithubRepositoryRequest {
    return { repo: isSet(object.repo) ? GitHubRepository.fromJSON(object.repo) : undefined };
  },

  toJSON(message: AddGithubRepositoryRequest): unknown {
    const obj: any = {};
    if (message.repo !== undefined) {
      obj.repo = GitHubRepository.toJSON(message.repo);
    }
    return obj;
  },

  create(base?: DeepPartial<AddGithubRepositoryRequest>): AddGithubRepositoryRequest {
    return AddGithubRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGithubRepositoryRequest>): AddGithubRepositoryRequest {
    const message = createBaseAddGithubRepositoryRequest();
    message.repo = (object.repo !== undefined && object.repo !== null)
      ? GitHubRepository.fromPartial(object.repo)
      : undefined;
    return message;
  },
};

function createBaseAddGithubRepositoryResponse(): AddGithubRepositoryResponse {
  return {};
}

export const AddGithubRepositoryResponse: MessageFns<AddGithubRepositoryResponse> = {
  encode(_: AddGithubRepositoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddGithubRepositoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGithubRepositoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddGithubRepositoryResponse {
    return {};
  },

  toJSON(_: AddGithubRepositoryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddGithubRepositoryResponse>): AddGithubRepositoryResponse {
    return AddGithubRepositoryResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddGithubRepositoryResponse>): AddGithubRepositoryResponse {
    const message = createBaseAddGithubRepositoryResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
