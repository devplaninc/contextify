// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.3
// source: dev_observer/api/types/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Analyzer } from "./observations";

export const protobufPackage = "dev_observer.api.types.config";

export interface GlobalConfig {
  analysis: AnalysisConfig | undefined;
}

export interface AnalysisConfig {
  repoAnalyzers: Analyzer[];
}

function createBaseGlobalConfig(): GlobalConfig {
  return { analysis: undefined };
}

export const GlobalConfig: MessageFns<GlobalConfig> = {
  encode(message: GlobalConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.analysis !== undefined) {
      AnalysisConfig.encode(message.analysis, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.analysis = AnalysisConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalConfig {
    return { analysis: isSet(object.analysis) ? AnalysisConfig.fromJSON(object.analysis) : undefined };
  },

  toJSON(message: GlobalConfig): unknown {
    const obj: any = {};
    if (message.analysis !== undefined) {
      obj.analysis = AnalysisConfig.toJSON(message.analysis);
    }
    return obj;
  },

  create(base?: DeepPartial<GlobalConfig>): GlobalConfig {
    return GlobalConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GlobalConfig>): GlobalConfig {
    const message = createBaseGlobalConfig();
    message.analysis = (object.analysis !== undefined && object.analysis !== null)
      ? AnalysisConfig.fromPartial(object.analysis)
      : undefined;
    return message;
  },
};

function createBaseAnalysisConfig(): AnalysisConfig {
  return { repoAnalyzers: [] };
}

export const AnalysisConfig: MessageFns<AnalysisConfig> = {
  encode(message: AnalysisConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.repoAnalyzers) {
      Analyzer.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalysisConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalysisConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repoAnalyzers.push(Analyzer.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalysisConfig {
    return {
      repoAnalyzers: globalThis.Array.isArray(object?.repoAnalyzers)
        ? object.repoAnalyzers.map((e: any) => Analyzer.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AnalysisConfig): unknown {
    const obj: any = {};
    if (message.repoAnalyzers?.length) {
      obj.repoAnalyzers = message.repoAnalyzers.map((e) => Analyzer.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AnalysisConfig>): AnalysisConfig {
    return AnalysisConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnalysisConfig>): AnalysisConfig {
    const message = createBaseAnalysisConfig();
    message.repoAnalyzers = object.repoAnalyzers?.map((e) => Analyzer.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
