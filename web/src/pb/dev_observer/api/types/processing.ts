// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.3
// source: dev_observer/api/types/processing.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "dev_observer.api.types.processing";

export interface ProcessingItemKey {
  entity?: { $case: "githubRepoId"; value: string } | { $case: "websiteUrl"; value: string } | undefined;
}

export interface ProcessingItem {
  key: ProcessingItemKey | undefined;
  nextProcessing?: Date | undefined;
  lastProcessed?: Date | undefined;
  lastError?: string | undefined;
  noProcessing: boolean;
}

function createBaseProcessingItemKey(): ProcessingItemKey {
  return { entity: undefined };
}

export const ProcessingItemKey: MessageFns<ProcessingItemKey> = {
  encode(message: ProcessingItemKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.entity?.$case) {
      case "githubRepoId":
        writer.uint32(802).string(message.entity.value);
        break;
      case "websiteUrl":
        writer.uint32(810).string(message.entity.value);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessingItemKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessingItemKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.entity = { $case: "githubRepoId", value: reader.string() };
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.entity = { $case: "websiteUrl", value: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessingItemKey {
    return {
      entity: isSet(object.githubRepoId)
        ? { $case: "githubRepoId", value: gt.String(object.githubRepoId) }
        : isSet(object.websiteUrl)
        ? { $case: "websiteUrl", value: gt.String(object.websiteUrl) }
        : undefined,
    };
  },

  toJSON(message: ProcessingItemKey): unknown {
    const obj: any = {};
    if (message.entity?.$case === "githubRepoId") {
      obj.githubRepoId = message.entity.value;
    } else if (message.entity?.$case === "websiteUrl") {
      obj.websiteUrl = message.entity.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessingItemKey>): ProcessingItemKey {
    return ProcessingItemKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessingItemKey>): ProcessingItemKey {
    const message = createBaseProcessingItemKey();
    switch (object.entity?.$case) {
      case "githubRepoId": {
        if (object.entity?.value !== undefined && object.entity?.value !== null) {
          message.entity = { $case: "githubRepoId", value: object.entity.value };
        }
        break;
      }
      case "websiteUrl": {
        if (object.entity?.value !== undefined && object.entity?.value !== null) {
          message.entity = { $case: "websiteUrl", value: object.entity.value };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseProcessingItem(): ProcessingItem {
  return {
    key: undefined,
    nextProcessing: undefined,
    lastProcessed: undefined,
    lastError: undefined,
    noProcessing: false,
  };
}

export const ProcessingItem: MessageFns<ProcessingItem> = {
  encode(message: ProcessingItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      ProcessingItemKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.nextProcessing !== undefined) {
      Timestamp.encode(toTimestamp(message.nextProcessing), writer.uint32(18).fork()).join();
    }
    if (message.lastProcessed !== undefined) {
      Timestamp.encode(toTimestamp(message.lastProcessed), writer.uint32(26).fork()).join();
    }
    if (message.lastError !== undefined) {
      writer.uint32(34).string(message.lastError);
    }
    if (message.noProcessing !== false) {
      writer.uint32(40).bool(message.noProcessing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessingItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessingItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = ProcessingItemKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextProcessing = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastProcessed = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastError = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.noProcessing = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessingItem {
    return {
      key: isSet(object.key) ? ProcessingItemKey.fromJSON(object.key) : undefined,
      nextProcessing: isSet(object.nextProcessing) ? fromJsonTimestamp(object.nextProcessing) : undefined,
      lastProcessed: isSet(object.lastProcessed) ? fromJsonTimestamp(object.lastProcessed) : undefined,
      lastError: isSet(object.lastError) ? gt.String(object.lastError) : undefined,
      noProcessing: isSet(object.noProcessing) ? gt.Boolean(object.noProcessing) : false,
    };
  },

  toJSON(message: ProcessingItem): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = ProcessingItemKey.toJSON(message.key);
    }
    if (message.nextProcessing !== undefined) {
      obj.nextProcessing = message.nextProcessing.toISOString();
    }
    if (message.lastProcessed !== undefined) {
      obj.lastProcessed = message.lastProcessed.toISOString();
    }
    if (message.lastError !== undefined) {
      obj.lastError = message.lastError;
    }
    if (message.noProcessing !== false) {
      obj.noProcessing = message.noProcessing;
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessingItem>): ProcessingItem {
    return ProcessingItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessingItem>): ProcessingItem {
    const message = createBaseProcessingItem();
    message.key = (object.key !== undefined && object.key !== null)
      ? ProcessingItemKey.fromPartial(object.key)
      : undefined;
    message.nextProcessing = object.nextProcessing ?? undefined;
    message.lastProcessed = object.lastProcessed ?? undefined;
    message.lastError = object.lastError ?? undefined;
    message.noProcessing = object.noProcessing ?? false;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
