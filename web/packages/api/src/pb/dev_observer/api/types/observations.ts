// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: dev_observer/api/types/observations.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "dev_observer.api.types.observations";

export interface ObservationKey {
  kind: string;
  name: string;
  key: string;
}

export interface Observation {
  key: ObservationKey | undefined;
  content: string;
}

export interface Analyzer {
  name: string;
  promptPrefix: string;
  fileName: string;
}

function createBaseObservationKey(): ObservationKey {
  return { kind: "", name: "", key: "" };
}

export const ObservationKey: MessageFns<ObservationKey> = {
  encode(message: ObservationKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.key !== "") {
      writer.uint32(26).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ObservationKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObservationKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObservationKey {
    return {
      kind: isSet(object.kind) ? gt.String(object.kind) : "",
      name: isSet(object.name) ? gt.String(object.name) : "",
      key: isSet(object.key) ? gt.String(object.key) : "",
    };
  },

  toJSON(message: ObservationKey): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create(base?: DeepPartial<ObservationKey>): ObservationKey {
    return ObservationKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ObservationKey>): ObservationKey {
    const message = createBaseObservationKey();
    message.kind = object.kind ?? "";
    message.name = object.name ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseObservation(): Observation {
  return { key: undefined, content: "" };
}

export const Observation: MessageFns<Observation> = {
  encode(message: Observation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      ObservationKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Observation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObservation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = ObservationKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Observation {
    return {
      key: isSet(object.key) ? ObservationKey.fromJSON(object.key) : undefined,
      content: isSet(object.content) ? gt.String(object.content) : "",
    };
  },

  toJSON(message: Observation): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = ObservationKey.toJSON(message.key);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create(base?: DeepPartial<Observation>): Observation {
    return Observation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Observation>): Observation {
    const message = createBaseObservation();
    message.key = (object.key !== undefined && object.key !== null)
      ? ObservationKey.fromPartial(object.key)
      : undefined;
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseAnalyzer(): Analyzer {
  return { name: "", promptPrefix: "", fileName: "" };
}

export const Analyzer: MessageFns<Analyzer> = {
  encode(message: Analyzer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.promptPrefix !== "") {
      writer.uint32(18).string(message.promptPrefix);
    }
    if (message.fileName !== "") {
      writer.uint32(26).string(message.fileName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Analyzer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalyzer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.promptPrefix = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Analyzer {
    return {
      name: isSet(object.name) ? gt.String(object.name) : "",
      promptPrefix: isSet(object.promptPrefix) ? gt.String(object.promptPrefix) : "",
      fileName: isSet(object.fileName) ? gt.String(object.fileName) : "",
    };
  },

  toJSON(message: Analyzer): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.promptPrefix !== "") {
      obj.promptPrefix = message.promptPrefix;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    return obj;
  },

  create(base?: DeepPartial<Analyzer>): Analyzer {
    return Analyzer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Analyzer>): Analyzer {
    const message = createBaseAnalyzer();
    message.name = object.name ?? "";
    message.promptPrefix = object.promptPrefix ?? "";
    message.fileName = object.fileName ?? "";
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
