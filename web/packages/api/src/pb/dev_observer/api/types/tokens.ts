// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: dev_observer/api/types/tokens.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "dev_observer.api.types.tokens";

export enum AuthTokenProvider {
  UNKNOWN = 0,
  BIT_BUCKET = 1,
  JIRA = 2,
}

export function authTokenProviderFromJSON(object: any): AuthTokenProvider {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return AuthTokenProvider.UNKNOWN;
    case 1:
    case "BIT_BUCKET":
      return AuthTokenProvider.BIT_BUCKET;
    case 2:
    case "JIRA":
      return AuthTokenProvider.JIRA;
    default:
      throw new gt.Error("Unrecognized enum value " + object + " for enum AuthTokenProvider");
  }
}

export function authTokenProviderToJSON(object: AuthTokenProvider): string {
  switch (object) {
    case AuthTokenProvider.UNKNOWN:
      return "UNKNOWN";
    case AuthTokenProvider.BIT_BUCKET:
      return "BIT_BUCKET";
    case AuthTokenProvider.JIRA:
      return "JIRA";
    default:
      throw new gt.Error("Unrecognized enum value " + object + " for enum AuthTokenProvider");
  }
}

export interface AuthToken {
  id: string;
  namespace: string;
  provider: AuthTokenProvider;
  /** Name of the workspace if this is a workspace token. */
  workspace?:
    | string
    | undefined;
  /** Full name of the repo if this is a repo token. */
  repo?:
    | string
    | undefined;
  /** True if this is a system auto-provisioned token (e.g. provided by Forge for BitBucket) */
  system: boolean;
  token: string;
  expiresAt?: Date | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface TokensFilter {
  namespace?: string | undefined;
  workspace?: string | undefined;
}

function createBaseAuthToken(): AuthToken {
  return {
    id: "",
    namespace: "",
    provider: 0,
    workspace: undefined,
    repo: undefined,
    system: false,
    token: "",
    expiresAt: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const AuthToken: MessageFns<AuthToken> = {
  encode(message: AuthToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.namespace !== "") {
      writer.uint32(18).string(message.namespace);
    }
    if (message.provider !== 0) {
      writer.uint32(24).int32(message.provider);
    }
    if (message.workspace !== undefined) {
      writer.uint32(34).string(message.workspace);
    }
    if (message.repo !== undefined) {
      writer.uint32(42).string(message.repo);
    }
    if (message.system !== false) {
      writer.uint32(48).bool(message.system);
    }
    if (message.token !== "") {
      writer.uint32(58).string(message.token);
    }
    if (message.expiresAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(66).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(74).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.provider = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.workspace = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.repo = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.system = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthToken {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      namespace: isSet(object.namespace) ? gt.String(object.namespace) : "",
      provider: isSet(object.provider) ? authTokenProviderFromJSON(object.provider) : 0,
      workspace: isSet(object.workspace) ? gt.String(object.workspace) : undefined,
      repo: isSet(object.repo) ? gt.String(object.repo) : undefined,
      system: isSet(object.system) ? gt.Boolean(object.system) : false,
      token: isSet(object.token) ? gt.String(object.token) : "",
      expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: AuthToken): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.provider !== 0) {
      obj.provider = authTokenProviderToJSON(message.provider);
    }
    if (message.workspace !== undefined) {
      obj.workspace = message.workspace;
    }
    if (message.repo !== undefined) {
      obj.repo = message.repo;
    }
    if (message.system !== false) {
      obj.system = message.system;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.expiresAt !== undefined) {
      obj.expiresAt = message.expiresAt.toISOString();
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<AuthToken>): AuthToken {
    return AuthToken.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthToken>): AuthToken {
    const message = createBaseAuthToken();
    message.id = object.id ?? "";
    message.namespace = object.namespace ?? "";
    message.provider = object.provider ?? 0;
    message.workspace = object.workspace ?? undefined;
    message.repo = object.repo ?? undefined;
    message.system = object.system ?? false;
    message.token = object.token ?? "";
    message.expiresAt = object.expiresAt ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseTokensFilter(): TokensFilter {
  return { namespace: undefined, workspace: undefined };
}

export const TokensFilter: MessageFns<TokensFilter> = {
  encode(message: TokensFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== undefined) {
      writer.uint32(10).string(message.namespace);
    }
    if (message.workspace !== undefined) {
      writer.uint32(18).string(message.workspace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokensFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokensFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workspace = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokensFilter {
    return {
      namespace: isSet(object.namespace) ? gt.String(object.namespace) : undefined,
      workspace: isSet(object.workspace) ? gt.String(object.workspace) : undefined,
    };
  },

  toJSON(message: TokensFilter): unknown {
    const obj: any = {};
    if (message.namespace !== undefined) {
      obj.namespace = message.namespace;
    }
    if (message.workspace !== undefined) {
      obj.workspace = message.workspace;
    }
    return obj;
  },

  create(base?: DeepPartial<TokensFilter>): TokensFilter {
    return TokensFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokensFilter>): TokensFilter {
    const message = createBaseTokensFilter();
    message.namespace = object.namespace ?? undefined;
    message.workspace = object.workspace ?? undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
