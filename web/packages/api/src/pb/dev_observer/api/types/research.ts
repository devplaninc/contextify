// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: dev_observer/api/types/research.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "dev_observer.api.types";

export enum ResearchJobStatus {
  RESEARCH_JOB_STATUS_UNSPECIFIED = 0,
  RESEARCH_JOB_STATUS_PENDING = 1,
  RESEARCH_JOB_STATUS_RUNNING = 2,
  RESEARCH_JOB_STATUS_SUCCEEDED = 3,
  RESEARCH_JOB_STATUS_FAILED = 4,
}

export function researchJobStatusFromJSON(object: any): ResearchJobStatus {
  switch (object) {
    case 0:
    case "RESEARCH_JOB_STATUS_UNSPECIFIED":
      return ResearchJobStatus.RESEARCH_JOB_STATUS_UNSPECIFIED;
    case 1:
    case "RESEARCH_JOB_STATUS_PENDING":
      return ResearchJobStatus.RESEARCH_JOB_STATUS_PENDING;
    case 2:
    case "RESEARCH_JOB_STATUS_RUNNING":
      return ResearchJobStatus.RESEARCH_JOB_STATUS_RUNNING;
    case 3:
    case "RESEARCH_JOB_STATUS_SUCCEEDED":
      return ResearchJobStatus.RESEARCH_JOB_STATUS_SUCCEEDED;
    case 4:
    case "RESEARCH_JOB_STATUS_FAILED":
      return ResearchJobStatus.RESEARCH_JOB_STATUS_FAILED;
    default:
      throw new gt.Error("Unrecognized enum value " + object + " for enum ResearchJobStatus");
  }
}

export function researchJobStatusToJSON(object: ResearchJobStatus): string {
  switch (object) {
    case ResearchJobStatus.RESEARCH_JOB_STATUS_UNSPECIFIED:
      return "RESEARCH_JOB_STATUS_UNSPECIFIED";
    case ResearchJobStatus.RESEARCH_JOB_STATUS_PENDING:
      return "RESEARCH_JOB_STATUS_PENDING";
    case ResearchJobStatus.RESEARCH_JOB_STATUS_RUNNING:
      return "RESEARCH_JOB_STATUS_RUNNING";
    case ResearchJobStatus.RESEARCH_JOB_STATUS_SUCCEEDED:
      return "RESEARCH_JOB_STATUS_SUCCEEDED";
    case ResearchJobStatus.RESEARCH_JOB_STATUS_FAILED:
      return "RESEARCH_JOB_STATUS_FAILED";
    default:
      throw new gt.Error("Unrecognized enum value " + object + " for enum ResearchJobStatus");
  }
}

export interface ResearchJobParams {
  iterationLimit: number;
  goals: string[];
  additionalParams: { [key: string]: string };
}

export interface ResearchJobParams_AdditionalParamsEntry {
  key: string;
  value: string;
}

export interface ResearchJob {
  id: string;
  userId: string;
  repoUrl: string;
  params: ResearchJobParams | undefined;
  status: ResearchJobStatus;
  startedAt?: Date | undefined;
  completedAt?: Date | undefined;
  s3ResultPath?: string | undefined;
  s3LogPath?: string | undefined;
  error?: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface CreateResearchJobRequest {
  repoUrl: string;
  params: ResearchJobParams | undefined;
}

export interface CreateResearchJobResponse {
  job: ResearchJob | undefined;
}

export interface GetResearchJobRequest {
  jobId: string;
}

export interface GetResearchJobResponse {
  job: ResearchJob | undefined;
}

export interface ListResearchJobsRequest {
  userId?: string | undefined;
  status?: ResearchJobStatus | undefined;
  limit: number;
  offset: number;
}

export interface ListResearchJobsResponse {
  jobs: ResearchJob[];
  totalCount: number;
}

export interface GetResearchJobLogsRequest {
  jobId: string;
}

export interface GetResearchJobLogsResponse {
  logs: string;
  s3LogPath?: string | undefined;
}

export interface GetResearchJobResultRequest {
  jobId: string;
}

export interface GetResearchJobResultResponse {
  result: string;
  s3ResultPath?: string | undefined;
}

function createBaseResearchJobParams(): ResearchJobParams {
  return { iterationLimit: 0, goals: [], additionalParams: {} };
}

export const ResearchJobParams: MessageFns<ResearchJobParams> = {
  encode(message: ResearchJobParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iterationLimit !== 0) {
      writer.uint32(8).int32(message.iterationLimit);
    }
    for (const v of message.goals) {
      writer.uint32(18).string(v!);
    }
    Object.entries(message.additionalParams).forEach(([key, value]) => {
      ResearchJobParams_AdditionalParamsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResearchJobParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResearchJobParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.iterationLimit = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.goals.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = ResearchJobParams_AdditionalParamsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.additionalParams[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResearchJobParams {
    return {
      iterationLimit: isSet(object.iterationLimit) ? gt.Number(object.iterationLimit) : 0,
      goals: gt.Array.isArray(object?.goals) ? object.goals.map((e: any) => gt.String(e)) : [],
      additionalParams: isObject(object.additionalParams)
        ? Object.entries(object.additionalParams).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ResearchJobParams): unknown {
    const obj: any = {};
    if (message.iterationLimit !== 0) {
      obj.iterationLimit = Math.round(message.iterationLimit);
    }
    if (message.goals?.length) {
      obj.goals = message.goals;
    }
    if (message.additionalParams) {
      const entries = Object.entries(message.additionalParams);
      if (entries.length > 0) {
        obj.additionalParams = {};
        entries.forEach(([k, v]) => {
          obj.additionalParams[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ResearchJobParams>): ResearchJobParams {
    return ResearchJobParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResearchJobParams>): ResearchJobParams {
    const message = createBaseResearchJobParams();
    message.iterationLimit = object.iterationLimit ?? 0;
    message.goals = object.goals?.map((e) => e) || [];
    message.additionalParams = Object.entries(object.additionalParams ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = gt.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseResearchJobParams_AdditionalParamsEntry(): ResearchJobParams_AdditionalParamsEntry {
  return { key: "", value: "" };
}

export const ResearchJobParams_AdditionalParamsEntry: MessageFns<ResearchJobParams_AdditionalParamsEntry> = {
  encode(message: ResearchJobParams_AdditionalParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResearchJobParams_AdditionalParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResearchJobParams_AdditionalParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResearchJobParams_AdditionalParamsEntry {
    return {
      key: isSet(object.key) ? gt.String(object.key) : "",
      value: isSet(object.value) ? gt.String(object.value) : "",
    };
  },

  toJSON(message: ResearchJobParams_AdditionalParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ResearchJobParams_AdditionalParamsEntry>): ResearchJobParams_AdditionalParamsEntry {
    return ResearchJobParams_AdditionalParamsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResearchJobParams_AdditionalParamsEntry>): ResearchJobParams_AdditionalParamsEntry {
    const message = createBaseResearchJobParams_AdditionalParamsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseResearchJob(): ResearchJob {
  return {
    id: "",
    userId: "",
    repoUrl: "",
    params: undefined,
    status: 0,
    startedAt: undefined,
    completedAt: undefined,
    s3ResultPath: undefined,
    s3LogPath: undefined,
    error: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const ResearchJob: MessageFns<ResearchJob> = {
  encode(message: ResearchJob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.repoUrl !== "") {
      writer.uint32(26).string(message.repoUrl);
    }
    if (message.params !== undefined) {
      ResearchJobParams.encode(message.params, writer.uint32(34).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.startedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startedAt), writer.uint32(50).fork()).join();
    }
    if (message.completedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.completedAt), writer.uint32(58).fork()).join();
    }
    if (message.s3ResultPath !== undefined) {
      writer.uint32(66).string(message.s3ResultPath);
    }
    if (message.s3LogPath !== undefined) {
      writer.uint32(74).string(message.s3LogPath);
    }
    if (message.error !== undefined) {
      writer.uint32(82).string(message.error);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(90).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResearchJob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResearchJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.repoUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.params = ResearchJobParams.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.startedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.completedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.s3ResultPath = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.s3LogPath = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResearchJob {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      userId: isSet(object.userId) ? gt.String(object.userId) : "",
      repoUrl: isSet(object.repoUrl) ? gt.String(object.repoUrl) : "",
      params: isSet(object.params) ? ResearchJobParams.fromJSON(object.params) : undefined,
      status: isSet(object.status) ? researchJobStatusFromJSON(object.status) : 0,
      startedAt: isSet(object.startedAt) ? fromJsonTimestamp(object.startedAt) : undefined,
      completedAt: isSet(object.completedAt) ? fromJsonTimestamp(object.completedAt) : undefined,
      s3ResultPath: isSet(object.s3ResultPath) ? gt.String(object.s3ResultPath) : undefined,
      s3LogPath: isSet(object.s3LogPath) ? gt.String(object.s3LogPath) : undefined,
      error: isSet(object.error) ? gt.String(object.error) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: ResearchJob): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.repoUrl !== "") {
      obj.repoUrl = message.repoUrl;
    }
    if (message.params !== undefined) {
      obj.params = ResearchJobParams.toJSON(message.params);
    }
    if (message.status !== 0) {
      obj.status = researchJobStatusToJSON(message.status);
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = message.startedAt.toISOString();
    }
    if (message.completedAt !== undefined) {
      obj.completedAt = message.completedAt.toISOString();
    }
    if (message.s3ResultPath !== undefined) {
      obj.s3ResultPath = message.s3ResultPath;
    }
    if (message.s3LogPath !== undefined) {
      obj.s3LogPath = message.s3LogPath;
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ResearchJob>): ResearchJob {
    return ResearchJob.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResearchJob>): ResearchJob {
    const message = createBaseResearchJob();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.repoUrl = object.repoUrl ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? ResearchJobParams.fromPartial(object.params)
      : undefined;
    message.status = object.status ?? 0;
    message.startedAt = object.startedAt ?? undefined;
    message.completedAt = object.completedAt ?? undefined;
    message.s3ResultPath = object.s3ResultPath ?? undefined;
    message.s3LogPath = object.s3LogPath ?? undefined;
    message.error = object.error ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseCreateResearchJobRequest(): CreateResearchJobRequest {
  return { repoUrl: "", params: undefined };
}

export const CreateResearchJobRequest: MessageFns<CreateResearchJobRequest> = {
  encode(message: CreateResearchJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repoUrl !== "") {
      writer.uint32(10).string(message.repoUrl);
    }
    if (message.params !== undefined) {
      ResearchJobParams.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateResearchJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateResearchJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repoUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = ResearchJobParams.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateResearchJobRequest {
    return {
      repoUrl: isSet(object.repoUrl) ? gt.String(object.repoUrl) : "",
      params: isSet(object.params) ? ResearchJobParams.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: CreateResearchJobRequest): unknown {
    const obj: any = {};
    if (message.repoUrl !== "") {
      obj.repoUrl = message.repoUrl;
    }
    if (message.params !== undefined) {
      obj.params = ResearchJobParams.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateResearchJobRequest>): CreateResearchJobRequest {
    return CreateResearchJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateResearchJobRequest>): CreateResearchJobRequest {
    const message = createBaseCreateResearchJobRequest();
    message.repoUrl = object.repoUrl ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? ResearchJobParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseCreateResearchJobResponse(): CreateResearchJobResponse {
  return { job: undefined };
}

export const CreateResearchJobResponse: MessageFns<CreateResearchJobResponse> = {
  encode(message: CreateResearchJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      ResearchJob.encode(message.job, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateResearchJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateResearchJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.job = ResearchJob.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateResearchJobResponse {
    return { job: isSet(object.job) ? ResearchJob.fromJSON(object.job) : undefined };
  },

  toJSON(message: CreateResearchJobResponse): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = ResearchJob.toJSON(message.job);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateResearchJobResponse>): CreateResearchJobResponse {
    return CreateResearchJobResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateResearchJobResponse>): CreateResearchJobResponse {
    const message = createBaseCreateResearchJobResponse();
    message.job = (object.job !== undefined && object.job !== null) ? ResearchJob.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseGetResearchJobRequest(): GetResearchJobRequest {
  return { jobId: "" };
}

export const GetResearchJobRequest: MessageFns<GetResearchJobRequest> = {
  encode(message: GetResearchJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResearchJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResearchJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResearchJobRequest {
    return { jobId: isSet(object.jobId) ? gt.String(object.jobId) : "" };
  },

  toJSON(message: GetResearchJobRequest): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetResearchJobRequest>): GetResearchJobRequest {
    return GetResearchJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetResearchJobRequest>): GetResearchJobRequest {
    const message = createBaseGetResearchJobRequest();
    message.jobId = object.jobId ?? "";
    return message;
  },
};

function createBaseGetResearchJobResponse(): GetResearchJobResponse {
  return { job: undefined };
}

export const GetResearchJobResponse: MessageFns<GetResearchJobResponse> = {
  encode(message: GetResearchJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      ResearchJob.encode(message.job, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResearchJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResearchJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.job = ResearchJob.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResearchJobResponse {
    return { job: isSet(object.job) ? ResearchJob.fromJSON(object.job) : undefined };
  },

  toJSON(message: GetResearchJobResponse): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = ResearchJob.toJSON(message.job);
    }
    return obj;
  },

  create(base?: DeepPartial<GetResearchJobResponse>): GetResearchJobResponse {
    return GetResearchJobResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetResearchJobResponse>): GetResearchJobResponse {
    const message = createBaseGetResearchJobResponse();
    message.job = (object.job !== undefined && object.job !== null) ? ResearchJob.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseListResearchJobsRequest(): ListResearchJobsRequest {
  return { userId: undefined, status: undefined, limit: 0, offset: 0 };
}

export const ListResearchJobsRequest: MessageFns<ListResearchJobsRequest> = {
  encode(message: ListResearchJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== undefined) {
      writer.uint32(10).string(message.userId);
    }
    if (message.status !== undefined) {
      writer.uint32(16).int32(message.status);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(32).int32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListResearchJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListResearchJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListResearchJobsRequest {
    return {
      userId: isSet(object.userId) ? gt.String(object.userId) : undefined,
      status: isSet(object.status) ? researchJobStatusFromJSON(object.status) : undefined,
      limit: isSet(object.limit) ? gt.Number(object.limit) : 0,
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
    };
  },

  toJSON(message: ListResearchJobsRequest): unknown {
    const obj: any = {};
    if (message.userId !== undefined) {
      obj.userId = message.userId;
    }
    if (message.status !== undefined) {
      obj.status = researchJobStatusToJSON(message.status);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create(base?: DeepPartial<ListResearchJobsRequest>): ListResearchJobsRequest {
    return ListResearchJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListResearchJobsRequest>): ListResearchJobsRequest {
    const message = createBaseListResearchJobsRequest();
    message.userId = object.userId ?? undefined;
    message.status = object.status ?? undefined;
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseListResearchJobsResponse(): ListResearchJobsResponse {
  return { jobs: [], totalCount: 0 };
}

export const ListResearchJobsResponse: MessageFns<ListResearchJobsResponse> = {
  encode(message: ListResearchJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobs) {
      ResearchJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListResearchJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListResearchJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobs.push(ResearchJob.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListResearchJobsResponse {
    return {
      jobs: gt.Array.isArray(object?.jobs) ? object.jobs.map((e: any) => ResearchJob.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? gt.Number(object.totalCount) : 0,
    };
  },

  toJSON(message: ListResearchJobsResponse): unknown {
    const obj: any = {};
    if (message.jobs?.length) {
      obj.jobs = message.jobs.map((e) => ResearchJob.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    return obj;
  },

  create(base?: DeepPartial<ListResearchJobsResponse>): ListResearchJobsResponse {
    return ListResearchJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListResearchJobsResponse>): ListResearchJobsResponse {
    const message = createBaseListResearchJobsResponse();
    message.jobs = object.jobs?.map((e) => ResearchJob.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

function createBaseGetResearchJobLogsRequest(): GetResearchJobLogsRequest {
  return { jobId: "" };
}

export const GetResearchJobLogsRequest: MessageFns<GetResearchJobLogsRequest> = {
  encode(message: GetResearchJobLogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResearchJobLogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResearchJobLogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResearchJobLogsRequest {
    return { jobId: isSet(object.jobId) ? gt.String(object.jobId) : "" };
  },

  toJSON(message: GetResearchJobLogsRequest): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetResearchJobLogsRequest>): GetResearchJobLogsRequest {
    return GetResearchJobLogsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetResearchJobLogsRequest>): GetResearchJobLogsRequest {
    const message = createBaseGetResearchJobLogsRequest();
    message.jobId = object.jobId ?? "";
    return message;
  },
};

function createBaseGetResearchJobLogsResponse(): GetResearchJobLogsResponse {
  return { logs: "", s3LogPath: undefined };
}

export const GetResearchJobLogsResponse: MessageFns<GetResearchJobLogsResponse> = {
  encode(message: GetResearchJobLogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.logs !== "") {
      writer.uint32(10).string(message.logs);
    }
    if (message.s3LogPath !== undefined) {
      writer.uint32(18).string(message.s3LogPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResearchJobLogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResearchJobLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.logs = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.s3LogPath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResearchJobLogsResponse {
    return {
      logs: isSet(object.logs) ? gt.String(object.logs) : "",
      s3LogPath: isSet(object.s3LogPath) ? gt.String(object.s3LogPath) : undefined,
    };
  },

  toJSON(message: GetResearchJobLogsResponse): unknown {
    const obj: any = {};
    if (message.logs !== "") {
      obj.logs = message.logs;
    }
    if (message.s3LogPath !== undefined) {
      obj.s3LogPath = message.s3LogPath;
    }
    return obj;
  },

  create(base?: DeepPartial<GetResearchJobLogsResponse>): GetResearchJobLogsResponse {
    return GetResearchJobLogsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetResearchJobLogsResponse>): GetResearchJobLogsResponse {
    const message = createBaseGetResearchJobLogsResponse();
    message.logs = object.logs ?? "";
    message.s3LogPath = object.s3LogPath ?? undefined;
    return message;
  },
};

function createBaseGetResearchJobResultRequest(): GetResearchJobResultRequest {
  return { jobId: "" };
}

export const GetResearchJobResultRequest: MessageFns<GetResearchJobResultRequest> = {
  encode(message: GetResearchJobResultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResearchJobResultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResearchJobResultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResearchJobResultRequest {
    return { jobId: isSet(object.jobId) ? gt.String(object.jobId) : "" };
  },

  toJSON(message: GetResearchJobResultRequest): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetResearchJobResultRequest>): GetResearchJobResultRequest {
    return GetResearchJobResultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetResearchJobResultRequest>): GetResearchJobResultRequest {
    const message = createBaseGetResearchJobResultRequest();
    message.jobId = object.jobId ?? "";
    return message;
  },
};

function createBaseGetResearchJobResultResponse(): GetResearchJobResultResponse {
  return { result: "", s3ResultPath: undefined };
}

export const GetResearchJobResultResponse: MessageFns<GetResearchJobResultResponse> = {
  encode(message: GetResearchJobResultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== "") {
      writer.uint32(10).string(message.result);
    }
    if (message.s3ResultPath !== undefined) {
      writer.uint32(18).string(message.s3ResultPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResearchJobResultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResearchJobResultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.s3ResultPath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResearchJobResultResponse {
    return {
      result: isSet(object.result) ? gt.String(object.result) : "",
      s3ResultPath: isSet(object.s3ResultPath) ? gt.String(object.s3ResultPath) : undefined,
    };
  },

  toJSON(message: GetResearchJobResultResponse): unknown {
    const obj: any = {};
    if (message.result !== "") {
      obj.result = message.result;
    }
    if (message.s3ResultPath !== undefined) {
      obj.s3ResultPath = message.s3ResultPath;
    }
    return obj;
  },

  create(base?: DeepPartial<GetResearchJobResultResponse>): GetResearchJobResultResponse {
    return GetResearchJobResultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetResearchJobResultResponse>): GetResearchJobResultResponse {
    const message = createBaseGetResearchJobResultResponse();
    message.result = object.result ?? "";
    message.s3ResultPath = object.s3ResultPath ?? undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
