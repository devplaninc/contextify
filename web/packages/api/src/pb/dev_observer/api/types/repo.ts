// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: dev_observer/api/types/repo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { UsageMetadata } from "./ai";
import { ObservationKey } from "./observations";

export const protobufPackage = "dev_observer.api.types.repo";

export enum GitProvider {
  GITHUB = 0,
  BIT_BUCKET = 1,
}

export function gitProviderFromJSON(object: any): GitProvider {
  switch (object) {
    case 0:
    case "GITHUB":
      return GitProvider.GITHUB;
    case 1:
    case "BIT_BUCKET":
      return GitProvider.BIT_BUCKET;
    default:
      throw new gt.Error("Unrecognized enum value " + object + " for enum GitProvider");
  }
}

export function gitProviderToJSON(object: GitProvider): string {
  switch (object) {
    case GitProvider.GITHUB:
      return "GITHUB";
    case GitProvider.BIT_BUCKET:
      return "BIT_BUCKET";
    default:
      throw new gt.Error("Unrecognized enum value " + object + " for enum GitProvider");
  }
}

export interface GitRepository {
  id: string;
  name: string;
  fullName: string;
  url: string;
  description: string;
  provider: GitProvider;
  properties?: GitProperties | undefined;
}

export interface GitProperties {
  appInfo?: GitAppInfo | undefined;
  meta?: GitMeta | undefined;
  bitBucketInfo?: BitBucketInfo | undefined;
}

export interface BitBucketInfo {
  workspaceUuid: string;
}

export interface GitMeta {
  lastRefresh: Date | undefined;
  cloneUrl?: string | undefined;
  sizeKb?: number | undefined;
}

export interface GitAppInfo {
  lastRefresh: Date | undefined;
  installationId?: number | undefined;
}

export interface ReposFilter {
  provider?: GitProvider | undefined;
  owner?: string | undefined;
}

export interface CodeResearchMeta {
  summary: string;
  createdAt: Date | undefined;
  repoFullName: string;
  repoUrl: string;
  areaTitle: string;
}

export interface CodeResearchAreaMeta {
  researchKey: ObservationKey | undefined;
  meta: CodeResearchMeta | undefined;
}

export interface CodeResearchOrganizationMeta {
  areaMetas: CodeResearchAreaMeta[];
}

export interface ResearchLog {
  items: ResearchLogItem[];
  startedAt: Date | undefined;
  finishedAt: Date | undefined;
  totalUsage?: UsageMetadata | undefined;
}

export interface ResearchLogItem {
  observations: string;
  toolCalls: ToolCallResult[];
  startedAt: Date | undefined;
  finishedAt: Date | undefined;
  summary: string;
  usage?: UsageMetadata | undefined;
}

export interface ToolCallResult {
  requestedToolCall: string;
  result: string;
  status: ToolCallResult_ToolCallStatus;
}

export enum ToolCallResult_ToolCallStatus {
  UNPROCESSED = 0,
  SUCCESS = 1,
  FAILURE = 2,
}

export function toolCallResult_ToolCallStatusFromJSON(object: any): ToolCallResult_ToolCallStatus {
  switch (object) {
    case 0:
    case "UNPROCESSED":
      return ToolCallResult_ToolCallStatus.UNPROCESSED;
    case 1:
    case "SUCCESS":
      return ToolCallResult_ToolCallStatus.SUCCESS;
    case 2:
    case "FAILURE":
      return ToolCallResult_ToolCallStatus.FAILURE;
    default:
      throw new gt.Error("Unrecognized enum value " + object + " for enum ToolCallResult_ToolCallStatus");
  }
}

export function toolCallResult_ToolCallStatusToJSON(object: ToolCallResult_ToolCallStatus): string {
  switch (object) {
    case ToolCallResult_ToolCallStatus.UNPROCESSED:
      return "UNPROCESSED";
    case ToolCallResult_ToolCallStatus.SUCCESS:
      return "SUCCESS";
    case ToolCallResult_ToolCallStatus.FAILURE:
      return "FAILURE";
    default:
      throw new gt.Error("Unrecognized enum value " + object + " for enum ToolCallResult_ToolCallStatus");
  }
}

function createBaseGitRepository(): GitRepository {
  return { id: "", name: "", fullName: "", url: "", description: "", provider: 0, properties: undefined };
}

export const GitRepository: MessageFns<GitRepository> = {
  encode(message: GitRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.fullName !== "") {
      writer.uint32(26).string(message.fullName);
    }
    if (message.url !== "") {
      writer.uint32(34).string(message.url);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.provider !== 0) {
      writer.uint32(48).int32(message.provider);
    }
    if (message.properties !== undefined) {
      GitProperties.encode(message.properties, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fullName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.provider = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.properties = GitProperties.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitRepository {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      name: isSet(object.name) ? gt.String(object.name) : "",
      fullName: isSet(object.fullName) ? gt.String(object.fullName) : "",
      url: isSet(object.url) ? gt.String(object.url) : "",
      description: isSet(object.description) ? gt.String(object.description) : "",
      provider: isSet(object.provider) ? gitProviderFromJSON(object.provider) : 0,
      properties: isSet(object.properties) ? GitProperties.fromJSON(object.properties) : undefined,
    };
  },

  toJSON(message: GitRepository): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.fullName !== "") {
      obj.fullName = message.fullName;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.provider !== 0) {
      obj.provider = gitProviderToJSON(message.provider);
    }
    if (message.properties !== undefined) {
      obj.properties = GitProperties.toJSON(message.properties);
    }
    return obj;
  },

  create(base?: DeepPartial<GitRepository>): GitRepository {
    return GitRepository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitRepository>): GitRepository {
    const message = createBaseGitRepository();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.fullName = object.fullName ?? "";
    message.url = object.url ?? "";
    message.description = object.description ?? "";
    message.provider = object.provider ?? 0;
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? GitProperties.fromPartial(object.properties)
      : undefined;
    return message;
  },
};

function createBaseGitProperties(): GitProperties {
  return { appInfo: undefined, meta: undefined, bitBucketInfo: undefined };
}

export const GitProperties: MessageFns<GitProperties> = {
  encode(message: GitProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appInfo !== undefined) {
      GitAppInfo.encode(message.appInfo, writer.uint32(10).fork()).join();
    }
    if (message.meta !== undefined) {
      GitMeta.encode(message.meta, writer.uint32(18).fork()).join();
    }
    if (message.bitBucketInfo !== undefined) {
      BitBucketInfo.encode(message.bitBucketInfo, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.appInfo = GitAppInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.meta = GitMeta.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bitBucketInfo = BitBucketInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitProperties {
    return {
      appInfo: isSet(object.appInfo) ? GitAppInfo.fromJSON(object.appInfo) : undefined,
      meta: isSet(object.meta) ? GitMeta.fromJSON(object.meta) : undefined,
      bitBucketInfo: isSet(object.bitBucketInfo) ? BitBucketInfo.fromJSON(object.bitBucketInfo) : undefined,
    };
  },

  toJSON(message: GitProperties): unknown {
    const obj: any = {};
    if (message.appInfo !== undefined) {
      obj.appInfo = GitAppInfo.toJSON(message.appInfo);
    }
    if (message.meta !== undefined) {
      obj.meta = GitMeta.toJSON(message.meta);
    }
    if (message.bitBucketInfo !== undefined) {
      obj.bitBucketInfo = BitBucketInfo.toJSON(message.bitBucketInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<GitProperties>): GitProperties {
    return GitProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitProperties>): GitProperties {
    const message = createBaseGitProperties();
    message.appInfo = (object.appInfo !== undefined && object.appInfo !== null)
      ? GitAppInfo.fromPartial(object.appInfo)
      : undefined;
    message.meta = (object.meta !== undefined && object.meta !== null) ? GitMeta.fromPartial(object.meta) : undefined;
    message.bitBucketInfo = (object.bitBucketInfo !== undefined && object.bitBucketInfo !== null)
      ? BitBucketInfo.fromPartial(object.bitBucketInfo)
      : undefined;
    return message;
  },
};

function createBaseBitBucketInfo(): BitBucketInfo {
  return { workspaceUuid: "" };
}

export const BitBucketInfo: MessageFns<BitBucketInfo> = {
  encode(message: BitBucketInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workspaceUuid !== "") {
      writer.uint32(10).string(message.workspaceUuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BitBucketInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBitBucketInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspaceUuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BitBucketInfo {
    return { workspaceUuid: isSet(object.workspaceUuid) ? gt.String(object.workspaceUuid) : "" };
  },

  toJSON(message: BitBucketInfo): unknown {
    const obj: any = {};
    if (message.workspaceUuid !== "") {
      obj.workspaceUuid = message.workspaceUuid;
    }
    return obj;
  },

  create(base?: DeepPartial<BitBucketInfo>): BitBucketInfo {
    return BitBucketInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BitBucketInfo>): BitBucketInfo {
    const message = createBaseBitBucketInfo();
    message.workspaceUuid = object.workspaceUuid ?? "";
    return message;
  },
};

function createBaseGitMeta(): GitMeta {
  return { lastRefresh: undefined, cloneUrl: undefined, sizeKb: undefined };
}

export const GitMeta: MessageFns<GitMeta> = {
  encode(message: GitMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastRefresh !== undefined) {
      Timestamp.encode(toTimestamp(message.lastRefresh), writer.uint32(10).fork()).join();
    }
    if (message.cloneUrl !== undefined) {
      writer.uint32(18).string(message.cloneUrl);
    }
    if (message.sizeKb !== undefined) {
      writer.uint32(24).int32(message.sizeKb);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastRefresh = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cloneUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sizeKb = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitMeta {
    return {
      lastRefresh: isSet(object.lastRefresh) ? fromJsonTimestamp(object.lastRefresh) : undefined,
      cloneUrl: isSet(object.cloneUrl) ? gt.String(object.cloneUrl) : undefined,
      sizeKb: isSet(object.sizeKb) ? gt.Number(object.sizeKb) : undefined,
    };
  },

  toJSON(message: GitMeta): unknown {
    const obj: any = {};
    if (message.lastRefresh !== undefined) {
      obj.lastRefresh = message.lastRefresh.toISOString();
    }
    if (message.cloneUrl !== undefined) {
      obj.cloneUrl = message.cloneUrl;
    }
    if (message.sizeKb !== undefined) {
      obj.sizeKb = Math.round(message.sizeKb);
    }
    return obj;
  },

  create(base?: DeepPartial<GitMeta>): GitMeta {
    return GitMeta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitMeta>): GitMeta {
    const message = createBaseGitMeta();
    message.lastRefresh = object.lastRefresh ?? undefined;
    message.cloneUrl = object.cloneUrl ?? undefined;
    message.sizeKb = object.sizeKb ?? undefined;
    return message;
  },
};

function createBaseGitAppInfo(): GitAppInfo {
  return { lastRefresh: undefined, installationId: undefined };
}

export const GitAppInfo: MessageFns<GitAppInfo> = {
  encode(message: GitAppInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastRefresh !== undefined) {
      Timestamp.encode(toTimestamp(message.lastRefresh), writer.uint32(10).fork()).join();
    }
    if (message.installationId !== undefined) {
      writer.uint32(16).int32(message.installationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitAppInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitAppInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastRefresh = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.installationId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitAppInfo {
    return {
      lastRefresh: isSet(object.lastRefresh) ? fromJsonTimestamp(object.lastRefresh) : undefined,
      installationId: isSet(object.installationId) ? gt.Number(object.installationId) : undefined,
    };
  },

  toJSON(message: GitAppInfo): unknown {
    const obj: any = {};
    if (message.lastRefresh !== undefined) {
      obj.lastRefresh = message.lastRefresh.toISOString();
    }
    if (message.installationId !== undefined) {
      obj.installationId = Math.round(message.installationId);
    }
    return obj;
  },

  create(base?: DeepPartial<GitAppInfo>): GitAppInfo {
    return GitAppInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitAppInfo>): GitAppInfo {
    const message = createBaseGitAppInfo();
    message.lastRefresh = object.lastRefresh ?? undefined;
    message.installationId = object.installationId ?? undefined;
    return message;
  },
};

function createBaseReposFilter(): ReposFilter {
  return { provider: undefined, owner: undefined };
}

export const ReposFilter: MessageFns<ReposFilter> = {
  encode(message: ReposFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provider !== undefined) {
      writer.uint32(8).int32(message.provider);
    }
    if (message.owner !== undefined) {
      writer.uint32(18).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReposFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReposFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.provider = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReposFilter {
    return {
      provider: isSet(object.provider) ? gitProviderFromJSON(object.provider) : undefined,
      owner: isSet(object.owner) ? gt.String(object.owner) : undefined,
    };
  },

  toJSON(message: ReposFilter): unknown {
    const obj: any = {};
    if (message.provider !== undefined) {
      obj.provider = gitProviderToJSON(message.provider);
    }
    if (message.owner !== undefined) {
      obj.owner = message.owner;
    }
    return obj;
  },

  create(base?: DeepPartial<ReposFilter>): ReposFilter {
    return ReposFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReposFilter>): ReposFilter {
    const message = createBaseReposFilter();
    message.provider = object.provider ?? undefined;
    message.owner = object.owner ?? undefined;
    return message;
  },
};

function createBaseCodeResearchMeta(): CodeResearchMeta {
  return { summary: "", createdAt: undefined, repoFullName: "", repoUrl: "", areaTitle: "" };
}

export const CodeResearchMeta: MessageFns<CodeResearchMeta> = {
  encode(message: CodeResearchMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.summary !== "") {
      writer.uint32(10).string(message.summary);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).join();
    }
    if (message.repoFullName !== "") {
      writer.uint32(26).string(message.repoFullName);
    }
    if (message.repoUrl !== "") {
      writer.uint32(34).string(message.repoUrl);
    }
    if (message.areaTitle !== "") {
      writer.uint32(42).string(message.areaTitle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CodeResearchMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodeResearchMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.summary = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.repoFullName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.repoUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.areaTitle = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CodeResearchMeta {
    return {
      summary: isSet(object.summary) ? gt.String(object.summary) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      repoFullName: isSet(object.repoFullName) ? gt.String(object.repoFullName) : "",
      repoUrl: isSet(object.repoUrl) ? gt.String(object.repoUrl) : "",
      areaTitle: isSet(object.areaTitle) ? gt.String(object.areaTitle) : "",
    };
  },

  toJSON(message: CodeResearchMeta): unknown {
    const obj: any = {};
    if (message.summary !== "") {
      obj.summary = message.summary;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.repoFullName !== "") {
      obj.repoFullName = message.repoFullName;
    }
    if (message.repoUrl !== "") {
      obj.repoUrl = message.repoUrl;
    }
    if (message.areaTitle !== "") {
      obj.areaTitle = message.areaTitle;
    }
    return obj;
  },

  create(base?: DeepPartial<CodeResearchMeta>): CodeResearchMeta {
    return CodeResearchMeta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CodeResearchMeta>): CodeResearchMeta {
    const message = createBaseCodeResearchMeta();
    message.summary = object.summary ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.repoFullName = object.repoFullName ?? "";
    message.repoUrl = object.repoUrl ?? "";
    message.areaTitle = object.areaTitle ?? "";
    return message;
  },
};

function createBaseCodeResearchAreaMeta(): CodeResearchAreaMeta {
  return { researchKey: undefined, meta: undefined };
}

export const CodeResearchAreaMeta: MessageFns<CodeResearchAreaMeta> = {
  encode(message: CodeResearchAreaMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.researchKey !== undefined) {
      ObservationKey.encode(message.researchKey, writer.uint32(10).fork()).join();
    }
    if (message.meta !== undefined) {
      CodeResearchMeta.encode(message.meta, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CodeResearchAreaMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodeResearchAreaMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.researchKey = ObservationKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.meta = CodeResearchMeta.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CodeResearchAreaMeta {
    return {
      researchKey: isSet(object.researchKey) ? ObservationKey.fromJSON(object.researchKey) : undefined,
      meta: isSet(object.meta) ? CodeResearchMeta.fromJSON(object.meta) : undefined,
    };
  },

  toJSON(message: CodeResearchAreaMeta): unknown {
    const obj: any = {};
    if (message.researchKey !== undefined) {
      obj.researchKey = ObservationKey.toJSON(message.researchKey);
    }
    if (message.meta !== undefined) {
      obj.meta = CodeResearchMeta.toJSON(message.meta);
    }
    return obj;
  },

  create(base?: DeepPartial<CodeResearchAreaMeta>): CodeResearchAreaMeta {
    return CodeResearchAreaMeta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CodeResearchAreaMeta>): CodeResearchAreaMeta {
    const message = createBaseCodeResearchAreaMeta();
    message.researchKey = (object.researchKey !== undefined && object.researchKey !== null)
      ? ObservationKey.fromPartial(object.researchKey)
      : undefined;
    message.meta = (object.meta !== undefined && object.meta !== null)
      ? CodeResearchMeta.fromPartial(object.meta)
      : undefined;
    return message;
  },
};

function createBaseCodeResearchOrganizationMeta(): CodeResearchOrganizationMeta {
  return { areaMetas: [] };
}

export const CodeResearchOrganizationMeta: MessageFns<CodeResearchOrganizationMeta> = {
  encode(message: CodeResearchOrganizationMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.areaMetas) {
      CodeResearchAreaMeta.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CodeResearchOrganizationMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodeResearchOrganizationMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.areaMetas.push(CodeResearchAreaMeta.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CodeResearchOrganizationMeta {
    return {
      areaMetas: gt.Array.isArray(object?.areaMetas)
        ? object.areaMetas.map((e: any) => CodeResearchAreaMeta.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CodeResearchOrganizationMeta): unknown {
    const obj: any = {};
    if (message.areaMetas?.length) {
      obj.areaMetas = message.areaMetas.map((e) => CodeResearchAreaMeta.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CodeResearchOrganizationMeta>): CodeResearchOrganizationMeta {
    return CodeResearchOrganizationMeta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CodeResearchOrganizationMeta>): CodeResearchOrganizationMeta {
    const message = createBaseCodeResearchOrganizationMeta();
    message.areaMetas = object.areaMetas?.map((e) => CodeResearchAreaMeta.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResearchLog(): ResearchLog {
  return { items: [], startedAt: undefined, finishedAt: undefined, totalUsage: undefined };
}

export const ResearchLog: MessageFns<ResearchLog> = {
  encode(message: ResearchLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      ResearchLogItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.startedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startedAt), writer.uint32(18).fork()).join();
    }
    if (message.finishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.finishedAt), writer.uint32(26).fork()).join();
    }
    if (message.totalUsage !== undefined) {
      UsageMetadata.encode(message.totalUsage, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResearchLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResearchLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(ResearchLogItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.finishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.totalUsage = UsageMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResearchLog {
    return {
      items: gt.Array.isArray(object?.items) ? object.items.map((e: any) => ResearchLogItem.fromJSON(e)) : [],
      startedAt: isSet(object.startedAt) ? fromJsonTimestamp(object.startedAt) : undefined,
      finishedAt: isSet(object.finishedAt) ? fromJsonTimestamp(object.finishedAt) : undefined,
      totalUsage: isSet(object.totalUsage) ? UsageMetadata.fromJSON(object.totalUsage) : undefined,
    };
  },

  toJSON(message: ResearchLog): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => ResearchLogItem.toJSON(e));
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = message.startedAt.toISOString();
    }
    if (message.finishedAt !== undefined) {
      obj.finishedAt = message.finishedAt.toISOString();
    }
    if (message.totalUsage !== undefined) {
      obj.totalUsage = UsageMetadata.toJSON(message.totalUsage);
    }
    return obj;
  },

  create(base?: DeepPartial<ResearchLog>): ResearchLog {
    return ResearchLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResearchLog>): ResearchLog {
    const message = createBaseResearchLog();
    message.items = object.items?.map((e) => ResearchLogItem.fromPartial(e)) || [];
    message.startedAt = object.startedAt ?? undefined;
    message.finishedAt = object.finishedAt ?? undefined;
    message.totalUsage = (object.totalUsage !== undefined && object.totalUsage !== null)
      ? UsageMetadata.fromPartial(object.totalUsage)
      : undefined;
    return message;
  },
};

function createBaseResearchLogItem(): ResearchLogItem {
  return {
    observations: "",
    toolCalls: [],
    startedAt: undefined,
    finishedAt: undefined,
    summary: "",
    usage: undefined,
  };
}

export const ResearchLogItem: MessageFns<ResearchLogItem> = {
  encode(message: ResearchLogItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.observations !== "") {
      writer.uint32(10).string(message.observations);
    }
    for (const v of message.toolCalls) {
      ToolCallResult.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.startedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startedAt), writer.uint32(26).fork()).join();
    }
    if (message.finishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.finishedAt), writer.uint32(34).fork()).join();
    }
    if (message.summary !== "") {
      writer.uint32(42).string(message.summary);
    }
    if (message.usage !== undefined) {
      UsageMetadata.encode(message.usage, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResearchLogItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResearchLogItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.observations = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.toolCalls.push(ToolCallResult.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.finishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.summary = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.usage = UsageMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResearchLogItem {
    return {
      observations: isSet(object.observations) ? gt.String(object.observations) : "",
      toolCalls: gt.Array.isArray(object?.toolCalls)
        ? object.toolCalls.map((e: any) => ToolCallResult.fromJSON(e))
        : [],
      startedAt: isSet(object.startedAt) ? fromJsonTimestamp(object.startedAt) : undefined,
      finishedAt: isSet(object.finishedAt) ? fromJsonTimestamp(object.finishedAt) : undefined,
      summary: isSet(object.summary) ? gt.String(object.summary) : "",
      usage: isSet(object.usage) ? UsageMetadata.fromJSON(object.usage) : undefined,
    };
  },

  toJSON(message: ResearchLogItem): unknown {
    const obj: any = {};
    if (message.observations !== "") {
      obj.observations = message.observations;
    }
    if (message.toolCalls?.length) {
      obj.toolCalls = message.toolCalls.map((e) => ToolCallResult.toJSON(e));
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = message.startedAt.toISOString();
    }
    if (message.finishedAt !== undefined) {
      obj.finishedAt = message.finishedAt.toISOString();
    }
    if (message.summary !== "") {
      obj.summary = message.summary;
    }
    if (message.usage !== undefined) {
      obj.usage = UsageMetadata.toJSON(message.usage);
    }
    return obj;
  },

  create(base?: DeepPartial<ResearchLogItem>): ResearchLogItem {
    return ResearchLogItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResearchLogItem>): ResearchLogItem {
    const message = createBaseResearchLogItem();
    message.observations = object.observations ?? "";
    message.toolCalls = object.toolCalls?.map((e) => ToolCallResult.fromPartial(e)) || [];
    message.startedAt = object.startedAt ?? undefined;
    message.finishedAt = object.finishedAt ?? undefined;
    message.summary = object.summary ?? "";
    message.usage = (object.usage !== undefined && object.usage !== null)
      ? UsageMetadata.fromPartial(object.usage)
      : undefined;
    return message;
  },
};

function createBaseToolCallResult(): ToolCallResult {
  return { requestedToolCall: "", result: "", status: 0 };
}

export const ToolCallResult: MessageFns<ToolCallResult> = {
  encode(message: ToolCallResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestedToolCall !== "") {
      writer.uint32(10).string(message.requestedToolCall);
    }
    if (message.result !== "") {
      writer.uint32(18).string(message.result);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToolCallResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolCallResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestedToolCall = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.result = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolCallResult {
    return {
      requestedToolCall: isSet(object.requestedToolCall) ? gt.String(object.requestedToolCall) : "",
      result: isSet(object.result) ? gt.String(object.result) : "",
      status: isSet(object.status) ? toolCallResult_ToolCallStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: ToolCallResult): unknown {
    const obj: any = {};
    if (message.requestedToolCall !== "") {
      obj.requestedToolCall = message.requestedToolCall;
    }
    if (message.result !== "") {
      obj.result = message.result;
    }
    if (message.status !== 0) {
      obj.status = toolCallResult_ToolCallStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<ToolCallResult>): ToolCallResult {
    return ToolCallResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ToolCallResult>): ToolCallResult {
    const message = createBaseToolCallResult();
    message.requestedToolCall = object.requestedToolCall ?? "";
    message.result = object.result ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
