// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: dev_observer/api/types/repo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "dev_observer.api.types.repo";

export interface GitHubRepository {
  id: string;
  name: string;
  fullName: string;
  url: string;
  description: string;
  properties?: GitProperties | undefined;
}

export interface GitProperties {
  appInfo?: GitAppInfo | undefined;
  meta?: GitMeta | undefined;
  changeAnalysis?: ChangeAnalysisConfig | undefined;
}

export interface GitMeta {
  lastRefresh: Date | undefined;
  cloneUrl?: string | undefined;
  sizeKb?: number | undefined;
}

export interface GitAppInfo {
  lastRefresh: Date | undefined;
  installationId?: number | undefined;
}

export interface ChangeAnalysisConfig {
  enrolled: boolean;
  enrolledAt: Date | undefined;
}

export interface RepoChangeAnalysis {
  id: string;
  repoId: string;
  status: string;
  observationKey?: string | undefined;
  errorMessage?: string | undefined;
  analyzedAt?: Date | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

function createBaseGitHubRepository(): GitHubRepository {
  return { id: "", name: "", fullName: "", url: "", description: "", properties: undefined };
}

export const GitHubRepository: MessageFns<GitHubRepository> = {
  encode(message: GitHubRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.fullName !== "") {
      writer.uint32(26).string(message.fullName);
    }
    if (message.url !== "") {
      writer.uint32(34).string(message.url);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.properties !== undefined) {
      GitProperties.encode(message.properties, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitHubRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitHubRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fullName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.properties = GitProperties.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitHubRepository {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      name: isSet(object.name) ? gt.String(object.name) : "",
      fullName: isSet(object.fullName) ? gt.String(object.fullName) : "",
      url: isSet(object.url) ? gt.String(object.url) : "",
      description: isSet(object.description) ? gt.String(object.description) : "",
      properties: isSet(object.properties) ? GitProperties.fromJSON(object.properties) : undefined,
    };
  },

  toJSON(message: GitHubRepository): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.fullName !== "") {
      obj.fullName = message.fullName;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.properties !== undefined) {
      obj.properties = GitProperties.toJSON(message.properties);
    }
    return obj;
  },

  create(base?: DeepPartial<GitHubRepository>): GitHubRepository {
    return GitHubRepository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitHubRepository>): GitHubRepository {
    const message = createBaseGitHubRepository();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.fullName = object.fullName ?? "";
    message.url = object.url ?? "";
    message.description = object.description ?? "";
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? GitProperties.fromPartial(object.properties)
      : undefined;
    return message;
  },
};

function createBaseGitProperties(): GitProperties {
  return { appInfo: undefined, meta: undefined, changeAnalysis: undefined };
}

export const GitProperties: MessageFns<GitProperties> = {
  encode(message: GitProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appInfo !== undefined) {
      GitAppInfo.encode(message.appInfo, writer.uint32(10).fork()).join();
    }
    if (message.meta !== undefined) {
      GitMeta.encode(message.meta, writer.uint32(18).fork()).join();
    }
    if (message.changeAnalysis !== undefined) {
      ChangeAnalysisConfig.encode(message.changeAnalysis, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.appInfo = GitAppInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.meta = GitMeta.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.changeAnalysis = ChangeAnalysisConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitProperties {
    return {
      appInfo: isSet(object.appInfo) ? GitAppInfo.fromJSON(object.appInfo) : undefined,
      meta: isSet(object.meta) ? GitMeta.fromJSON(object.meta) : undefined,
      changeAnalysis: isSet(object.changeAnalysis) ? ChangeAnalysisConfig.fromJSON(object.changeAnalysis) : undefined,
    };
  },

  toJSON(message: GitProperties): unknown {
    const obj: any = {};
    if (message.appInfo !== undefined) {
      obj.appInfo = GitAppInfo.toJSON(message.appInfo);
    }
    if (message.meta !== undefined) {
      obj.meta = GitMeta.toJSON(message.meta);
    }
    if (message.changeAnalysis !== undefined) {
      obj.changeAnalysis = ChangeAnalysisConfig.toJSON(message.changeAnalysis);
    }
    return obj;
  },

  create(base?: DeepPartial<GitProperties>): GitProperties {
    return GitProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitProperties>): GitProperties {
    const message = createBaseGitProperties();
    message.appInfo = (object.appInfo !== undefined && object.appInfo !== null)
      ? GitAppInfo.fromPartial(object.appInfo)
      : undefined;
    message.meta = (object.meta !== undefined && object.meta !== null) ? GitMeta.fromPartial(object.meta) : undefined;
    message.changeAnalysis = (object.changeAnalysis !== undefined && object.changeAnalysis !== null)
      ? ChangeAnalysisConfig.fromPartial(object.changeAnalysis)
      : undefined;
    return message;
  },
};

function createBaseGitMeta(): GitMeta {
  return { lastRefresh: undefined, cloneUrl: undefined, sizeKb: undefined };
}

export const GitMeta: MessageFns<GitMeta> = {
  encode(message: GitMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastRefresh !== undefined) {
      Timestamp.encode(toTimestamp(message.lastRefresh), writer.uint32(10).fork()).join();
    }
    if (message.cloneUrl !== undefined) {
      writer.uint32(18).string(message.cloneUrl);
    }
    if (message.sizeKb !== undefined) {
      writer.uint32(24).int32(message.sizeKb);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastRefresh = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cloneUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sizeKb = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitMeta {
    return {
      lastRefresh: isSet(object.lastRefresh) ? fromJsonTimestamp(object.lastRefresh) : undefined,
      cloneUrl: isSet(object.cloneUrl) ? gt.String(object.cloneUrl) : undefined,
      sizeKb: isSet(object.sizeKb) ? gt.Number(object.sizeKb) : undefined,
    };
  },

  toJSON(message: GitMeta): unknown {
    const obj: any = {};
    if (message.lastRefresh !== undefined) {
      obj.lastRefresh = message.lastRefresh.toISOString();
    }
    if (message.cloneUrl !== undefined) {
      obj.cloneUrl = message.cloneUrl;
    }
    if (message.sizeKb !== undefined) {
      obj.sizeKb = Math.round(message.sizeKb);
    }
    return obj;
  },

  create(base?: DeepPartial<GitMeta>): GitMeta {
    return GitMeta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitMeta>): GitMeta {
    const message = createBaseGitMeta();
    message.lastRefresh = object.lastRefresh ?? undefined;
    message.cloneUrl = object.cloneUrl ?? undefined;
    message.sizeKb = object.sizeKb ?? undefined;
    return message;
  },
};

function createBaseGitAppInfo(): GitAppInfo {
  return { lastRefresh: undefined, installationId: undefined };
}

export const GitAppInfo: MessageFns<GitAppInfo> = {
  encode(message: GitAppInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastRefresh !== undefined) {
      Timestamp.encode(toTimestamp(message.lastRefresh), writer.uint32(10).fork()).join();
    }
    if (message.installationId !== undefined) {
      writer.uint32(16).int32(message.installationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitAppInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitAppInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastRefresh = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.installationId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitAppInfo {
    return {
      lastRefresh: isSet(object.lastRefresh) ? fromJsonTimestamp(object.lastRefresh) : undefined,
      installationId: isSet(object.installationId) ? gt.Number(object.installationId) : undefined,
    };
  },

  toJSON(message: GitAppInfo): unknown {
    const obj: any = {};
    if (message.lastRefresh !== undefined) {
      obj.lastRefresh = message.lastRefresh.toISOString();
    }
    if (message.installationId !== undefined) {
      obj.installationId = Math.round(message.installationId);
    }
    return obj;
  },

  create(base?: DeepPartial<GitAppInfo>): GitAppInfo {
    return GitAppInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitAppInfo>): GitAppInfo {
    const message = createBaseGitAppInfo();
    message.lastRefresh = object.lastRefresh ?? undefined;
    message.installationId = object.installationId ?? undefined;
    return message;
  },
};

function createBaseChangeAnalysisConfig(): ChangeAnalysisConfig {
  return { enrolled: false, enrolledAt: undefined };
}

export const ChangeAnalysisConfig: MessageFns<ChangeAnalysisConfig> = {
  encode(message: ChangeAnalysisConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enrolled !== false) {
      writer.uint32(8).bool(message.enrolled);
    }
    if (message.enrolledAt !== undefined) {
      Timestamp.encode(toTimestamp(message.enrolledAt), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeAnalysisConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeAnalysisConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enrolled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.enrolledAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeAnalysisConfig {
    return {
      enrolled: isSet(object.enrolled) ? gt.Boolean(object.enrolled) : false,
      enrolledAt: isSet(object.enrolledAt) ? fromJsonTimestamp(object.enrolledAt) : undefined,
    };
  },

  toJSON(message: ChangeAnalysisConfig): unknown {
    const obj: any = {};
    if (message.enrolled !== false) {
      obj.enrolled = message.enrolled;
    }
    if (message.enrolledAt !== undefined) {
      obj.enrolledAt = message.enrolledAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ChangeAnalysisConfig>): ChangeAnalysisConfig {
    return ChangeAnalysisConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangeAnalysisConfig>): ChangeAnalysisConfig {
    const message = createBaseChangeAnalysisConfig();
    message.enrolled = object.enrolled ?? false;
    message.enrolledAt = object.enrolledAt ?? undefined;
    return message;
  },
};

function createBaseRepoChangeAnalysis(): RepoChangeAnalysis {
  return {
    id: "",
    repoId: "",
    status: "",
    observationKey: undefined,
    errorMessage: undefined,
    analyzedAt: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const RepoChangeAnalysis: MessageFns<RepoChangeAnalysis> = {
  encode(message: RepoChangeAnalysis, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.repoId !== "") {
      writer.uint32(18).string(message.repoId);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.observationKey !== undefined) {
      writer.uint32(34).string(message.observationKey);
    }
    if (message.errorMessage !== undefined) {
      writer.uint32(42).string(message.errorMessage);
    }
    if (message.analyzedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.analyzedAt), writer.uint32(50).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepoChangeAnalysis {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepoChangeAnalysis();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.repoId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.observationKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.analyzedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepoChangeAnalysis {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      repoId: isSet(object.repoId) ? gt.String(object.repoId) : "",
      status: isSet(object.status) ? gt.String(object.status) : "",
      observationKey: isSet(object.observationKey) ? gt.String(object.observationKey) : undefined,
      errorMessage: isSet(object.errorMessage) ? gt.String(object.errorMessage) : undefined,
      analyzedAt: isSet(object.analyzedAt) ? fromJsonTimestamp(object.analyzedAt) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: RepoChangeAnalysis): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.repoId !== "") {
      obj.repoId = message.repoId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.observationKey !== undefined) {
      obj.observationKey = message.observationKey;
    }
    if (message.errorMessage !== undefined) {
      obj.errorMessage = message.errorMessage;
    }
    if (message.analyzedAt !== undefined) {
      obj.analyzedAt = message.analyzedAt.toISOString();
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<RepoChangeAnalysis>): RepoChangeAnalysis {
    return RepoChangeAnalysis.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepoChangeAnalysis>): RepoChangeAnalysis {
    const message = createBaseRepoChangeAnalysis();
    message.id = object.id ?? "";
    message.repoId = object.repoId ?? "";
    message.status = object.status ?? "";
    message.observationKey = object.observationKey ?? undefined;
    message.errorMessage = object.errorMessage ?? undefined;
    message.analyzedAt = object.analyzedAt ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
