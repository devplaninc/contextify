// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: dev_observer/api/web/repositories.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GitProvider, gitProviderFromJSON, gitProviderToJSON, GitRepository, ReposFilter } from "../types/repo";

export const protobufPackage = "dev_observer.api.web.repositories";

export interface ListRepositoriesResponse {
  repos: GitRepository[];
}

export interface AddRepositoryRequest {
  url: string;
  provider: GitProvider;
}

export interface AddRepositoryResponse {
  repo: GitRepository | undefined;
}

export interface RescanRepositoryRequest {
  research?: boolean | undefined;
  skipSummary?: boolean | undefined;
}

export interface RescanRepositoryResponse {
}

export interface GetRepositoryResponse {
  repo: GitRepository | undefined;
}

export interface DeleteRepositoryResponse {
  repos: GitRepository[];
}

export interface FilterRepositoriesRequest {
  filter: ReposFilter | undefined;
}

export interface FilterRepositoriesResponse {
  repos: GitRepository[];
}

export interface RescanAnalysisSummaryRequest {
  force: boolean;
}

export interface RescanAnalysisSummaryResponse {
}

function createBaseListRepositoriesResponse(): ListRepositoriesResponse {
  return { repos: [] };
}

export const ListRepositoriesResponse: MessageFns<ListRepositoriesResponse> = {
  encode(message: ListRepositoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.repos) {
      GitRepository.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRepositoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRepositoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repos.push(GitRepository.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRepositoriesResponse {
    return { repos: gt.Array.isArray(object?.repos) ? object.repos.map((e: any) => GitRepository.fromJSON(e)) : [] };
  },

  toJSON(message: ListRepositoriesResponse): unknown {
    const obj: any = {};
    if (message.repos?.length) {
      obj.repos = message.repos.map((e) => GitRepository.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListRepositoriesResponse>): ListRepositoriesResponse {
    return ListRepositoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRepositoriesResponse>): ListRepositoriesResponse {
    const message = createBaseListRepositoriesResponse();
    message.repos = object.repos?.map((e) => GitRepository.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddRepositoryRequest(): AddRepositoryRequest {
  return { url: "", provider: 0 };
}

export const AddRepositoryRequest: MessageFns<AddRepositoryRequest> = {
  encode(message: AddRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.provider !== 0) {
      writer.uint32(16).int32(message.provider);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.provider = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddRepositoryRequest {
    return {
      url: isSet(object.url) ? gt.String(object.url) : "",
      provider: isSet(object.provider) ? gitProviderFromJSON(object.provider) : 0,
    };
  },

  toJSON(message: AddRepositoryRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.provider !== 0) {
      obj.provider = gitProviderToJSON(message.provider);
    }
    return obj;
  },

  create(base?: DeepPartial<AddRepositoryRequest>): AddRepositoryRequest {
    return AddRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddRepositoryRequest>): AddRepositoryRequest {
    const message = createBaseAddRepositoryRequest();
    message.url = object.url ?? "";
    message.provider = object.provider ?? 0;
    return message;
  },
};

function createBaseAddRepositoryResponse(): AddRepositoryResponse {
  return { repo: undefined };
}

export const AddRepositoryResponse: MessageFns<AddRepositoryResponse> = {
  encode(message: AddRepositoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repo !== undefined) {
      GitRepository.encode(message.repo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddRepositoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddRepositoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repo = GitRepository.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddRepositoryResponse {
    return { repo: isSet(object.repo) ? GitRepository.fromJSON(object.repo) : undefined };
  },

  toJSON(message: AddRepositoryResponse): unknown {
    const obj: any = {};
    if (message.repo !== undefined) {
      obj.repo = GitRepository.toJSON(message.repo);
    }
    return obj;
  },

  create(base?: DeepPartial<AddRepositoryResponse>): AddRepositoryResponse {
    return AddRepositoryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddRepositoryResponse>): AddRepositoryResponse {
    const message = createBaseAddRepositoryResponse();
    message.repo = (object.repo !== undefined && object.repo !== null)
      ? GitRepository.fromPartial(object.repo)
      : undefined;
    return message;
  },
};

function createBaseRescanRepositoryRequest(): RescanRepositoryRequest {
  return { research: undefined, skipSummary: undefined };
}

export const RescanRepositoryRequest: MessageFns<RescanRepositoryRequest> = {
  encode(message: RescanRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.research !== undefined) {
      writer.uint32(8).bool(message.research);
    }
    if (message.skipSummary !== undefined) {
      writer.uint32(16).bool(message.skipSummary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RescanRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRescanRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.research = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.skipSummary = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RescanRepositoryRequest {
    return {
      research: isSet(object.research) ? gt.Boolean(object.research) : undefined,
      skipSummary: isSet(object.skipSummary) ? gt.Boolean(object.skipSummary) : undefined,
    };
  },

  toJSON(message: RescanRepositoryRequest): unknown {
    const obj: any = {};
    if (message.research !== undefined) {
      obj.research = message.research;
    }
    if (message.skipSummary !== undefined) {
      obj.skipSummary = message.skipSummary;
    }
    return obj;
  },

  create(base?: DeepPartial<RescanRepositoryRequest>): RescanRepositoryRequest {
    return RescanRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RescanRepositoryRequest>): RescanRepositoryRequest {
    const message = createBaseRescanRepositoryRequest();
    message.research = object.research ?? undefined;
    message.skipSummary = object.skipSummary ?? undefined;
    return message;
  },
};

function createBaseRescanRepositoryResponse(): RescanRepositoryResponse {
  return {};
}

export const RescanRepositoryResponse: MessageFns<RescanRepositoryResponse> = {
  encode(_: RescanRepositoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RescanRepositoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRescanRepositoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RescanRepositoryResponse {
    return {};
  },

  toJSON(_: RescanRepositoryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RescanRepositoryResponse>): RescanRepositoryResponse {
    return RescanRepositoryResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RescanRepositoryResponse>): RescanRepositoryResponse {
    const message = createBaseRescanRepositoryResponse();
    return message;
  },
};

function createBaseGetRepositoryResponse(): GetRepositoryResponse {
  return { repo: undefined };
}

export const GetRepositoryResponse: MessageFns<GetRepositoryResponse> = {
  encode(message: GetRepositoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repo !== undefined) {
      GitRepository.encode(message.repo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRepositoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRepositoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repo = GitRepository.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRepositoryResponse {
    return { repo: isSet(object.repo) ? GitRepository.fromJSON(object.repo) : undefined };
  },

  toJSON(message: GetRepositoryResponse): unknown {
    const obj: any = {};
    if (message.repo !== undefined) {
      obj.repo = GitRepository.toJSON(message.repo);
    }
    return obj;
  },

  create(base?: DeepPartial<GetRepositoryResponse>): GetRepositoryResponse {
    return GetRepositoryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRepositoryResponse>): GetRepositoryResponse {
    const message = createBaseGetRepositoryResponse();
    message.repo = (object.repo !== undefined && object.repo !== null)
      ? GitRepository.fromPartial(object.repo)
      : undefined;
    return message;
  },
};

function createBaseDeleteRepositoryResponse(): DeleteRepositoryResponse {
  return { repos: [] };
}

export const DeleteRepositoryResponse: MessageFns<DeleteRepositoryResponse> = {
  encode(message: DeleteRepositoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.repos) {
      GitRepository.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRepositoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRepositoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repos.push(GitRepository.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRepositoryResponse {
    return { repos: gt.Array.isArray(object?.repos) ? object.repos.map((e: any) => GitRepository.fromJSON(e)) : [] };
  },

  toJSON(message: DeleteRepositoryResponse): unknown {
    const obj: any = {};
    if (message.repos?.length) {
      obj.repos = message.repos.map((e) => GitRepository.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRepositoryResponse>): DeleteRepositoryResponse {
    return DeleteRepositoryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRepositoryResponse>): DeleteRepositoryResponse {
    const message = createBaseDeleteRepositoryResponse();
    message.repos = object.repos?.map((e) => GitRepository.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFilterRepositoriesRequest(): FilterRepositoriesRequest {
  return { filter: undefined };
}

export const FilterRepositoriesRequest: MessageFns<FilterRepositoriesRequest> = {
  encode(message: FilterRepositoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined) {
      ReposFilter.encode(message.filter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterRepositoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterRepositoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = ReposFilter.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterRepositoriesRequest {
    return { filter: isSet(object.filter) ? ReposFilter.fromJSON(object.filter) : undefined };
  },

  toJSON(message: FilterRepositoriesRequest): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = ReposFilter.toJSON(message.filter);
    }
    return obj;
  },

  create(base?: DeepPartial<FilterRepositoriesRequest>): FilterRepositoriesRequest {
    return FilterRepositoriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FilterRepositoriesRequest>): FilterRepositoriesRequest {
    const message = createBaseFilterRepositoriesRequest();
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? ReposFilter.fromPartial(object.filter)
      : undefined;
    return message;
  },
};

function createBaseFilterRepositoriesResponse(): FilterRepositoriesResponse {
  return { repos: [] };
}

export const FilterRepositoriesResponse: MessageFns<FilterRepositoriesResponse> = {
  encode(message: FilterRepositoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.repos) {
      GitRepository.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterRepositoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterRepositoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repos.push(GitRepository.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterRepositoriesResponse {
    return { repos: gt.Array.isArray(object?.repos) ? object.repos.map((e: any) => GitRepository.fromJSON(e)) : [] };
  },

  toJSON(message: FilterRepositoriesResponse): unknown {
    const obj: any = {};
    if (message.repos?.length) {
      obj.repos = message.repos.map((e) => GitRepository.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FilterRepositoriesResponse>): FilterRepositoriesResponse {
    return FilterRepositoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FilterRepositoriesResponse>): FilterRepositoriesResponse {
    const message = createBaseFilterRepositoriesResponse();
    message.repos = object.repos?.map((e) => GitRepository.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRescanAnalysisSummaryRequest(): RescanAnalysisSummaryRequest {
  return { force: false };
}

export const RescanAnalysisSummaryRequest: MessageFns<RescanAnalysisSummaryRequest> = {
  encode(message: RescanAnalysisSummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.force !== false) {
      writer.uint32(8).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RescanAnalysisSummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRescanAnalysisSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.force = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RescanAnalysisSummaryRequest {
    return { force: isSet(object.force) ? gt.Boolean(object.force) : false };
  },

  toJSON(message: RescanAnalysisSummaryRequest): unknown {
    const obj: any = {};
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<RescanAnalysisSummaryRequest>): RescanAnalysisSummaryRequest {
    return RescanAnalysisSummaryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RescanAnalysisSummaryRequest>): RescanAnalysisSummaryRequest {
    const message = createBaseRescanAnalysisSummaryRequest();
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseRescanAnalysisSummaryResponse(): RescanAnalysisSummaryResponse {
  return {};
}

export const RescanAnalysisSummaryResponse: MessageFns<RescanAnalysisSummaryResponse> = {
  encode(_: RescanAnalysisSummaryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RescanAnalysisSummaryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRescanAnalysisSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RescanAnalysisSummaryResponse {
    return {};
  },

  toJSON(_: RescanAnalysisSummaryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RescanAnalysisSummaryResponse>): RescanAnalysisSummaryResponse {
    return RescanAnalysisSummaryResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RescanAnalysisSummaryResponse>): RescanAnalysisSummaryResponse {
    const message = createBaseRescanAnalysisSummaryResponse();
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
