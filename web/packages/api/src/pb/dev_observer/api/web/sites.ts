// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: dev_observer/api/web/sites.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { WebSite } from "../types/sites";

export const protobufPackage = "dev_observer.api.web.sites";

export interface ListWebSitesResponse {
  sites: WebSite[];
}

export interface AddWebSiteRequest {
  url: string;
  scanIfNew: boolean;
}

export interface AddWebSiteResponse {
  site: WebSite | undefined;
}

export interface RescanWebSiteResponse {
}

export interface GetWebSiteResponse {
  site: WebSite | undefined;
}

export interface DeleteWebSiteResponse {
  sites: WebSite[];
}

function createBaseListWebSitesResponse(): ListWebSitesResponse {
  return { sites: [] };
}

export const ListWebSitesResponse: MessageFns<ListWebSitesResponse> = {
  encode(message: ListWebSitesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sites) {
      WebSite.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWebSitesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWebSitesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sites.push(WebSite.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWebSitesResponse {
    return { sites: gt.Array.isArray(object?.sites) ? object.sites.map((e: any) => WebSite.fromJSON(e)) : [] };
  },

  toJSON(message: ListWebSitesResponse): unknown {
    const obj: any = {};
    if (message.sites?.length) {
      obj.sites = message.sites.map((e) => WebSite.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListWebSitesResponse>): ListWebSitesResponse {
    return ListWebSitesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWebSitesResponse>): ListWebSitesResponse {
    const message = createBaseListWebSitesResponse();
    message.sites = object.sites?.map((e) => WebSite.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddWebSiteRequest(): AddWebSiteRequest {
  return { url: "", scanIfNew: false };
}

export const AddWebSiteRequest: MessageFns<AddWebSiteRequest> = {
  encode(message: AddWebSiteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.scanIfNew !== false) {
      writer.uint32(16).bool(message.scanIfNew);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddWebSiteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddWebSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.scanIfNew = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddWebSiteRequest {
    return {
      url: isSet(object.url) ? gt.String(object.url) : "",
      scanIfNew: isSet(object.scanIfNew) ? gt.Boolean(object.scanIfNew) : false,
    };
  },

  toJSON(message: AddWebSiteRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.scanIfNew !== false) {
      obj.scanIfNew = message.scanIfNew;
    }
    return obj;
  },

  create(base?: DeepPartial<AddWebSiteRequest>): AddWebSiteRequest {
    return AddWebSiteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddWebSiteRequest>): AddWebSiteRequest {
    const message = createBaseAddWebSiteRequest();
    message.url = object.url ?? "";
    message.scanIfNew = object.scanIfNew ?? false;
    return message;
  },
};

function createBaseAddWebSiteResponse(): AddWebSiteResponse {
  return { site: undefined };
}

export const AddWebSiteResponse: MessageFns<AddWebSiteResponse> = {
  encode(message: AddWebSiteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.site !== undefined) {
      WebSite.encode(message.site, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddWebSiteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddWebSiteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.site = WebSite.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddWebSiteResponse {
    return { site: isSet(object.site) ? WebSite.fromJSON(object.site) : undefined };
  },

  toJSON(message: AddWebSiteResponse): unknown {
    const obj: any = {};
    if (message.site !== undefined) {
      obj.site = WebSite.toJSON(message.site);
    }
    return obj;
  },

  create(base?: DeepPartial<AddWebSiteResponse>): AddWebSiteResponse {
    return AddWebSiteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddWebSiteResponse>): AddWebSiteResponse {
    const message = createBaseAddWebSiteResponse();
    message.site = (object.site !== undefined && object.site !== null) ? WebSite.fromPartial(object.site) : undefined;
    return message;
  },
};

function createBaseRescanWebSiteResponse(): RescanWebSiteResponse {
  return {};
}

export const RescanWebSiteResponse: MessageFns<RescanWebSiteResponse> = {
  encode(_: RescanWebSiteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RescanWebSiteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRescanWebSiteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RescanWebSiteResponse {
    return {};
  },

  toJSON(_: RescanWebSiteResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RescanWebSiteResponse>): RescanWebSiteResponse {
    return RescanWebSiteResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RescanWebSiteResponse>): RescanWebSiteResponse {
    const message = createBaseRescanWebSiteResponse();
    return message;
  },
};

function createBaseGetWebSiteResponse(): GetWebSiteResponse {
  return { site: undefined };
}

export const GetWebSiteResponse: MessageFns<GetWebSiteResponse> = {
  encode(message: GetWebSiteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.site !== undefined) {
      WebSite.encode(message.site, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWebSiteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWebSiteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.site = WebSite.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWebSiteResponse {
    return { site: isSet(object.site) ? WebSite.fromJSON(object.site) : undefined };
  },

  toJSON(message: GetWebSiteResponse): unknown {
    const obj: any = {};
    if (message.site !== undefined) {
      obj.site = WebSite.toJSON(message.site);
    }
    return obj;
  },

  create(base?: DeepPartial<GetWebSiteResponse>): GetWebSiteResponse {
    return GetWebSiteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWebSiteResponse>): GetWebSiteResponse {
    const message = createBaseGetWebSiteResponse();
    message.site = (object.site !== undefined && object.site !== null) ? WebSite.fromPartial(object.site) : undefined;
    return message;
  },
};

function createBaseDeleteWebSiteResponse(): DeleteWebSiteResponse {
  return { sites: [] };
}

export const DeleteWebSiteResponse: MessageFns<DeleteWebSiteResponse> = {
  encode(message: DeleteWebSiteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sites) {
      WebSite.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWebSiteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWebSiteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sites.push(WebSite.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWebSiteResponse {
    return { sites: gt.Array.isArray(object?.sites) ? object.sites.map((e: any) => WebSite.fromJSON(e)) : [] };
  },

  toJSON(message: DeleteWebSiteResponse): unknown {
    const obj: any = {};
    if (message.sites?.length) {
      obj.sites = message.sites.map((e) => WebSite.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteWebSiteResponse>): DeleteWebSiteResponse {
    return DeleteWebSiteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteWebSiteResponse>): DeleteWebSiteResponse {
    const message = createBaseDeleteWebSiteResponse();
    message.sites = object.sites?.map((e) => WebSite.fromPartial(e)) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
