// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: dev_observer/api/web/change_analysis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Observation } from "../types/observations";

export const protobufPackage = "dev_observer.api.web.change_analysis";

export interface EnrollRepositoryRequest {
  repoId: string;
}

export interface EnrollRepositoryResponse {
  success: boolean;
  message: string;
}

export interface UnenrollRepositoryRequest {
  repoId: string;
}

export interface UnenrollRepositoryResponse {
  success: boolean;
  message: string;
}

export interface GetChangeSummariesRequest {
  repoId?: string | undefined;
  startDate?: Date | undefined;
  endDate?:
    | Date
    | undefined;
  /** pending/completed/failed */
  status?: string | undefined;
}

export interface ChangeSummary {
  id: string;
  repoId: string;
  status: string;
  observation?: Observation | undefined;
  errorMessage?: string | undefined;
  analyzedAt: Date | undefined;
  createdAt: Date | undefined;
}

export interface GetChangeSummariesResponse {
  summaries: ChangeSummary[];
}

export interface GetRepositoryEnrollmentStatusRequest {
  repoId: string;
}

export interface GetRepositoryEnrollmentStatusResponse {
  enrolled: boolean;
  lastAnalysis?: Date | undefined;
}

function createBaseEnrollRepositoryRequest(): EnrollRepositoryRequest {
  return { repoId: "" };
}

export const EnrollRepositoryRequest: MessageFns<EnrollRepositoryRequest> = {
  encode(message: EnrollRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repoId !== "") {
      writer.uint32(10).string(message.repoId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnrollRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnrollRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repoId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnrollRepositoryRequest {
    return { repoId: isSet(object.repoId) ? gt.String(object.repoId) : "" };
  },

  toJSON(message: EnrollRepositoryRequest): unknown {
    const obj: any = {};
    if (message.repoId !== "") {
      obj.repoId = message.repoId;
    }
    return obj;
  },

  create(base?: DeepPartial<EnrollRepositoryRequest>): EnrollRepositoryRequest {
    return EnrollRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnrollRepositoryRequest>): EnrollRepositoryRequest {
    const message = createBaseEnrollRepositoryRequest();
    message.repoId = object.repoId ?? "";
    return message;
  },
};

function createBaseEnrollRepositoryResponse(): EnrollRepositoryResponse {
  return { success: false, message: "" };
}

export const EnrollRepositoryResponse: MessageFns<EnrollRepositoryResponse> = {
  encode(message: EnrollRepositoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnrollRepositoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnrollRepositoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnrollRepositoryResponse {
    return {
      success: isSet(object.success) ? gt.Boolean(object.success) : false,
      message: isSet(object.message) ? gt.String(object.message) : "",
    };
  },

  toJSON(message: EnrollRepositoryResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<EnrollRepositoryResponse>): EnrollRepositoryResponse {
    return EnrollRepositoryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnrollRepositoryResponse>): EnrollRepositoryResponse {
    const message = createBaseEnrollRepositoryResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUnenrollRepositoryRequest(): UnenrollRepositoryRequest {
  return { repoId: "" };
}

export const UnenrollRepositoryRequest: MessageFns<UnenrollRepositoryRequest> = {
  encode(message: UnenrollRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repoId !== "") {
      writer.uint32(10).string(message.repoId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnenrollRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnenrollRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repoId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnenrollRepositoryRequest {
    return { repoId: isSet(object.repoId) ? gt.String(object.repoId) : "" };
  },

  toJSON(message: UnenrollRepositoryRequest): unknown {
    const obj: any = {};
    if (message.repoId !== "") {
      obj.repoId = message.repoId;
    }
    return obj;
  },

  create(base?: DeepPartial<UnenrollRepositoryRequest>): UnenrollRepositoryRequest {
    return UnenrollRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnenrollRepositoryRequest>): UnenrollRepositoryRequest {
    const message = createBaseUnenrollRepositoryRequest();
    message.repoId = object.repoId ?? "";
    return message;
  },
};

function createBaseUnenrollRepositoryResponse(): UnenrollRepositoryResponse {
  return { success: false, message: "" };
}

export const UnenrollRepositoryResponse: MessageFns<UnenrollRepositoryResponse> = {
  encode(message: UnenrollRepositoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnenrollRepositoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnenrollRepositoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnenrollRepositoryResponse {
    return {
      success: isSet(object.success) ? gt.Boolean(object.success) : false,
      message: isSet(object.message) ? gt.String(object.message) : "",
    };
  },

  toJSON(message: UnenrollRepositoryResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<UnenrollRepositoryResponse>): UnenrollRepositoryResponse {
    return UnenrollRepositoryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnenrollRepositoryResponse>): UnenrollRepositoryResponse {
    const message = createBaseUnenrollRepositoryResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseGetChangeSummariesRequest(): GetChangeSummariesRequest {
  return { repoId: undefined, startDate: undefined, endDate: undefined, status: undefined };
}

export const GetChangeSummariesRequest: MessageFns<GetChangeSummariesRequest> = {
  encode(message: GetChangeSummariesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repoId !== undefined) {
      writer.uint32(10).string(message.repoId);
    }
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(18).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(26).fork()).join();
    }
    if (message.status !== undefined) {
      writer.uint32(34).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChangeSummariesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChangeSummariesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChangeSummariesRequest {
    return {
      repoId: isSet(object.repoId) ? gt.String(object.repoId) : undefined,
      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
      status: isSet(object.status) ? gt.String(object.status) : undefined,
    };
  },

  toJSON(message: GetChangeSummariesRequest): unknown {
    const obj: any = {};
    if (message.repoId !== undefined) {
      obj.repoId = message.repoId;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate.toISOString();
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate.toISOString();
    }
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    return obj;
  },

  create(base?: DeepPartial<GetChangeSummariesRequest>): GetChangeSummariesRequest {
    return GetChangeSummariesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChangeSummariesRequest>): GetChangeSummariesRequest {
    const message = createBaseGetChangeSummariesRequest();
    message.repoId = object.repoId ?? undefined;
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.status = object.status ?? undefined;
    return message;
  },
};

function createBaseChangeSummary(): ChangeSummary {
  return {
    id: "",
    repoId: "",
    status: "",
    observation: undefined,
    errorMessage: undefined,
    analyzedAt: undefined,
    createdAt: undefined,
  };
}

export const ChangeSummary: MessageFns<ChangeSummary> = {
  encode(message: ChangeSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.repoId !== "") {
      writer.uint32(18).string(message.repoId);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.observation !== undefined) {
      Observation.encode(message.observation, writer.uint32(34).fork()).join();
    }
    if (message.errorMessage !== undefined) {
      writer.uint32(42).string(message.errorMessage);
    }
    if (message.analyzedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.analyzedAt), writer.uint32(50).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.repoId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.observation = Observation.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.analyzedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeSummary {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      repoId: isSet(object.repoId) ? gt.String(object.repoId) : "",
      status: isSet(object.status) ? gt.String(object.status) : "",
      observation: isSet(object.observation) ? Observation.fromJSON(object.observation) : undefined,
      errorMessage: isSet(object.errorMessage) ? gt.String(object.errorMessage) : undefined,
      analyzedAt: isSet(object.analyzedAt) ? fromJsonTimestamp(object.analyzedAt) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: ChangeSummary): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.repoId !== "") {
      obj.repoId = message.repoId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.observation !== undefined) {
      obj.observation = Observation.toJSON(message.observation);
    }
    if (message.errorMessage !== undefined) {
      obj.errorMessage = message.errorMessage;
    }
    if (message.analyzedAt !== undefined) {
      obj.analyzedAt = message.analyzedAt.toISOString();
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ChangeSummary>): ChangeSummary {
    return ChangeSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangeSummary>): ChangeSummary {
    const message = createBaseChangeSummary();
    message.id = object.id ?? "";
    message.repoId = object.repoId ?? "";
    message.status = object.status ?? "";
    message.observation = (object.observation !== undefined && object.observation !== null)
      ? Observation.fromPartial(object.observation)
      : undefined;
    message.errorMessage = object.errorMessage ?? undefined;
    message.analyzedAt = object.analyzedAt ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseGetChangeSummariesResponse(): GetChangeSummariesResponse {
  return { summaries: [] };
}

export const GetChangeSummariesResponse: MessageFns<GetChangeSummariesResponse> = {
  encode(message: GetChangeSummariesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.summaries) {
      ChangeSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChangeSummariesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChangeSummariesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.summaries.push(ChangeSummary.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChangeSummariesResponse {
    return {
      summaries: gt.Array.isArray(object?.summaries) ? object.summaries.map((e: any) => ChangeSummary.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetChangeSummariesResponse): unknown {
    const obj: any = {};
    if (message.summaries?.length) {
      obj.summaries = message.summaries.map((e) => ChangeSummary.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetChangeSummariesResponse>): GetChangeSummariesResponse {
    return GetChangeSummariesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChangeSummariesResponse>): GetChangeSummariesResponse {
    const message = createBaseGetChangeSummariesResponse();
    message.summaries = object.summaries?.map((e) => ChangeSummary.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetRepositoryEnrollmentStatusRequest(): GetRepositoryEnrollmentStatusRequest {
  return { repoId: "" };
}

export const GetRepositoryEnrollmentStatusRequest: MessageFns<GetRepositoryEnrollmentStatusRequest> = {
  encode(message: GetRepositoryEnrollmentStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repoId !== "") {
      writer.uint32(10).string(message.repoId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRepositoryEnrollmentStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRepositoryEnrollmentStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repoId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRepositoryEnrollmentStatusRequest {
    return { repoId: isSet(object.repoId) ? gt.String(object.repoId) : "" };
  },

  toJSON(message: GetRepositoryEnrollmentStatusRequest): unknown {
    const obj: any = {};
    if (message.repoId !== "") {
      obj.repoId = message.repoId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRepositoryEnrollmentStatusRequest>): GetRepositoryEnrollmentStatusRequest {
    return GetRepositoryEnrollmentStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRepositoryEnrollmentStatusRequest>): GetRepositoryEnrollmentStatusRequest {
    const message = createBaseGetRepositoryEnrollmentStatusRequest();
    message.repoId = object.repoId ?? "";
    return message;
  },
};

function createBaseGetRepositoryEnrollmentStatusResponse(): GetRepositoryEnrollmentStatusResponse {
  return { enrolled: false, lastAnalysis: undefined };
}

export const GetRepositoryEnrollmentStatusResponse: MessageFns<GetRepositoryEnrollmentStatusResponse> = {
  encode(message: GetRepositoryEnrollmentStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enrolled !== false) {
      writer.uint32(8).bool(message.enrolled);
    }
    if (message.lastAnalysis !== undefined) {
      Timestamp.encode(toTimestamp(message.lastAnalysis), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRepositoryEnrollmentStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRepositoryEnrollmentStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enrolled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastAnalysis = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRepositoryEnrollmentStatusResponse {
    return {
      enrolled: isSet(object.enrolled) ? gt.Boolean(object.enrolled) : false,
      lastAnalysis: isSet(object.lastAnalysis) ? fromJsonTimestamp(object.lastAnalysis) : undefined,
    };
  },

  toJSON(message: GetRepositoryEnrollmentStatusResponse): unknown {
    const obj: any = {};
    if (message.enrolled !== false) {
      obj.enrolled = message.enrolled;
    }
    if (message.lastAnalysis !== undefined) {
      obj.lastAnalysis = message.lastAnalysis.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<GetRepositoryEnrollmentStatusResponse>): GetRepositoryEnrollmentStatusResponse {
    return GetRepositoryEnrollmentStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRepositoryEnrollmentStatusResponse>): GetRepositoryEnrollmentStatusResponse {
    const message = createBaseGetRepositoryEnrollmentStatusResponse();
    message.enrolled = object.enrolled ?? false;
    message.lastAnalysis = object.lastAnalysis ?? undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
