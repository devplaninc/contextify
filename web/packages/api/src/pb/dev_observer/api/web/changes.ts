// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: dev_observer/api/web/changes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GitHubChangesSummary } from "../types/changes";

export const protobufPackage = "dev_observer.api.web.changes";

export interface ListChangesSummariesRequest {
  repoId: string;
  limit: number;
  offset: number;
}

export interface ListChangesSummariesResponse {
  summaries: GitHubChangesSummary[];
  totalCount: number;
}

export interface GetChangesSummaryRequest {
  summaryId: string;
}

export interface GetChangesSummaryResponse {
  summary: GitHubChangesSummary | undefined;
}

export interface CreateChangesSummaryRequest {
  repoId: string;
  daysBack: number;
}

export interface CreateChangesSummaryResponse {
  summary: GitHubChangesSummary | undefined;
}

export interface DeleteChangesSummaryRequest {
  summaryId: string;
}

export interface DeleteChangesSummaryResponse {
  success: boolean;
}

function createBaseListChangesSummariesRequest(): ListChangesSummariesRequest {
  return { repoId: "", limit: 0, offset: 0 };
}

export const ListChangesSummariesRequest: MessageFns<ListChangesSummariesRequest> = {
  encode(message: ListChangesSummariesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repoId !== "") {
      writer.uint32(10).string(message.repoId);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(24).int32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChangesSummariesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChangesSummariesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChangesSummariesRequest {
    return {
      repoId: isSet(object.repoId) ? gt.String(object.repoId) : "",
      limit: isSet(object.limit) ? gt.Number(object.limit) : 0,
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
    };
  },

  toJSON(message: ListChangesSummariesRequest): unknown {
    const obj: any = {};
    if (message.repoId !== "") {
      obj.repoId = message.repoId;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create(base?: DeepPartial<ListChangesSummariesRequest>): ListChangesSummariesRequest {
    return ListChangesSummariesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChangesSummariesRequest>): ListChangesSummariesRequest {
    const message = createBaseListChangesSummariesRequest();
    message.repoId = object.repoId ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseListChangesSummariesResponse(): ListChangesSummariesResponse {
  return { summaries: [], totalCount: 0 };
}

export const ListChangesSummariesResponse: MessageFns<ListChangesSummariesResponse> = {
  encode(message: ListChangesSummariesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.summaries) {
      GitHubChangesSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChangesSummariesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChangesSummariesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.summaries.push(GitHubChangesSummary.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChangesSummariesResponse {
    return {
      summaries: gt.Array.isArray(object?.summaries)
        ? object.summaries.map((e: any) => GitHubChangesSummary.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? gt.Number(object.totalCount) : 0,
    };
  },

  toJSON(message: ListChangesSummariesResponse): unknown {
    const obj: any = {};
    if (message.summaries?.length) {
      obj.summaries = message.summaries.map((e) => GitHubChangesSummary.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    return obj;
  },

  create(base?: DeepPartial<ListChangesSummariesResponse>): ListChangesSummariesResponse {
    return ListChangesSummariesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChangesSummariesResponse>): ListChangesSummariesResponse {
    const message = createBaseListChangesSummariesResponse();
    message.summaries = object.summaries?.map((e) => GitHubChangesSummary.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

function createBaseGetChangesSummaryRequest(): GetChangesSummaryRequest {
  return { summaryId: "" };
}

export const GetChangesSummaryRequest: MessageFns<GetChangesSummaryRequest> = {
  encode(message: GetChangesSummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.summaryId !== "") {
      writer.uint32(10).string(message.summaryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChangesSummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChangesSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.summaryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChangesSummaryRequest {
    return { summaryId: isSet(object.summaryId) ? gt.String(object.summaryId) : "" };
  },

  toJSON(message: GetChangesSummaryRequest): unknown {
    const obj: any = {};
    if (message.summaryId !== "") {
      obj.summaryId = message.summaryId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetChangesSummaryRequest>): GetChangesSummaryRequest {
    return GetChangesSummaryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChangesSummaryRequest>): GetChangesSummaryRequest {
    const message = createBaseGetChangesSummaryRequest();
    message.summaryId = object.summaryId ?? "";
    return message;
  },
};

function createBaseGetChangesSummaryResponse(): GetChangesSummaryResponse {
  return { summary: undefined };
}

export const GetChangesSummaryResponse: MessageFns<GetChangesSummaryResponse> = {
  encode(message: GetChangesSummaryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.summary !== undefined) {
      GitHubChangesSummary.encode(message.summary, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChangesSummaryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChangesSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.summary = GitHubChangesSummary.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChangesSummaryResponse {
    return { summary: isSet(object.summary) ? GitHubChangesSummary.fromJSON(object.summary) : undefined };
  },

  toJSON(message: GetChangesSummaryResponse): unknown {
    const obj: any = {};
    if (message.summary !== undefined) {
      obj.summary = GitHubChangesSummary.toJSON(message.summary);
    }
    return obj;
  },

  create(base?: DeepPartial<GetChangesSummaryResponse>): GetChangesSummaryResponse {
    return GetChangesSummaryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChangesSummaryResponse>): GetChangesSummaryResponse {
    const message = createBaseGetChangesSummaryResponse();
    message.summary = (object.summary !== undefined && object.summary !== null)
      ? GitHubChangesSummary.fromPartial(object.summary)
      : undefined;
    return message;
  },
};

function createBaseCreateChangesSummaryRequest(): CreateChangesSummaryRequest {
  return { repoId: "", daysBack: 0 };
}

export const CreateChangesSummaryRequest: MessageFns<CreateChangesSummaryRequest> = {
  encode(message: CreateChangesSummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repoId !== "") {
      writer.uint32(10).string(message.repoId);
    }
    if (message.daysBack !== 0) {
      writer.uint32(16).int32(message.daysBack);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChangesSummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChangesSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.repoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.daysBack = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChangesSummaryRequest {
    return {
      repoId: isSet(object.repoId) ? gt.String(object.repoId) : "",
      daysBack: isSet(object.daysBack) ? gt.Number(object.daysBack) : 0,
    };
  },

  toJSON(message: CreateChangesSummaryRequest): unknown {
    const obj: any = {};
    if (message.repoId !== "") {
      obj.repoId = message.repoId;
    }
    if (message.daysBack !== 0) {
      obj.daysBack = Math.round(message.daysBack);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateChangesSummaryRequest>): CreateChangesSummaryRequest {
    return CreateChangesSummaryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateChangesSummaryRequest>): CreateChangesSummaryRequest {
    const message = createBaseCreateChangesSummaryRequest();
    message.repoId = object.repoId ?? "";
    message.daysBack = object.daysBack ?? 0;
    return message;
  },
};

function createBaseCreateChangesSummaryResponse(): CreateChangesSummaryResponse {
  return { summary: undefined };
}

export const CreateChangesSummaryResponse: MessageFns<CreateChangesSummaryResponse> = {
  encode(message: CreateChangesSummaryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.summary !== undefined) {
      GitHubChangesSummary.encode(message.summary, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChangesSummaryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChangesSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.summary = GitHubChangesSummary.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChangesSummaryResponse {
    return { summary: isSet(object.summary) ? GitHubChangesSummary.fromJSON(object.summary) : undefined };
  },

  toJSON(message: CreateChangesSummaryResponse): unknown {
    const obj: any = {};
    if (message.summary !== undefined) {
      obj.summary = GitHubChangesSummary.toJSON(message.summary);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateChangesSummaryResponse>): CreateChangesSummaryResponse {
    return CreateChangesSummaryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateChangesSummaryResponse>): CreateChangesSummaryResponse {
    const message = createBaseCreateChangesSummaryResponse();
    message.summary = (object.summary !== undefined && object.summary !== null)
      ? GitHubChangesSummary.fromPartial(object.summary)
      : undefined;
    return message;
  },
};

function createBaseDeleteChangesSummaryRequest(): DeleteChangesSummaryRequest {
  return { summaryId: "" };
}

export const DeleteChangesSummaryRequest: MessageFns<DeleteChangesSummaryRequest> = {
  encode(message: DeleteChangesSummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.summaryId !== "") {
      writer.uint32(10).string(message.summaryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteChangesSummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteChangesSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.summaryId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteChangesSummaryRequest {
    return { summaryId: isSet(object.summaryId) ? gt.String(object.summaryId) : "" };
  },

  toJSON(message: DeleteChangesSummaryRequest): unknown {
    const obj: any = {};
    if (message.summaryId !== "") {
      obj.summaryId = message.summaryId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteChangesSummaryRequest>): DeleteChangesSummaryRequest {
    return DeleteChangesSummaryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteChangesSummaryRequest>): DeleteChangesSummaryRequest {
    const message = createBaseDeleteChangesSummaryRequest();
    message.summaryId = object.summaryId ?? "";
    return message;
  },
};

function createBaseDeleteChangesSummaryResponse(): DeleteChangesSummaryResponse {
  return { success: false };
}

export const DeleteChangesSummaryResponse: MessageFns<DeleteChangesSummaryResponse> = {
  encode(message: DeleteChangesSummaryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteChangesSummaryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteChangesSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteChangesSummaryResponse {
    return { success: isSet(object.success) ? gt.Boolean(object.success) : false };
  },

  toJSON(message: DeleteChangesSummaryResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteChangesSummaryResponse>): DeleteChangesSummaryResponse {
    return DeleteChangesSummaryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteChangesSummaryResponse>): DeleteChangesSummaryResponse {
    const message = createBaseDeleteChangesSummaryResponse();
    message.success = object.success ?? false;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
