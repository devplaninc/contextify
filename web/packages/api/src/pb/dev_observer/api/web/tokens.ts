// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: dev_observer/api/web/tokens.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RepoToken } from "../types/repo";

export const protobufPackage = "dev_observer.api.web.tokens";

export interface ListTokensRequest {
  /** Optional namespace filter */
  namespace?: string | undefined;
}

export interface ListTokensResponse {
  tokens: RepoToken[];
}

export interface AddTokenRequest {
  token: RepoToken | undefined;
}

export interface AddTokenResponse {
  token: RepoToken | undefined;
}

export interface GetTokenResponse {
  token: RepoToken | undefined;
}

export interface UpdateTokenRequest {
  token: string;
}

export interface UpdateTokenResponse {
  token: RepoToken | undefined;
}

export interface DeleteTokenResponse {
}

function createBaseListTokensRequest(): ListTokensRequest {
  return { namespace: undefined };
}

export const ListTokensRequest: MessageFns<ListTokensRequest> = {
  encode(message: ListTokensRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== undefined) {
      writer.uint32(10).string(message.namespace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTokensRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTokensRequest {
    return { namespace: isSet(object.namespace) ? gt.String(object.namespace) : undefined };
  },

  toJSON(message: ListTokensRequest): unknown {
    const obj: any = {};
    if (message.namespace !== undefined) {
      obj.namespace = message.namespace;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTokensRequest>): ListTokensRequest {
    return ListTokensRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTokensRequest>): ListTokensRequest {
    const message = createBaseListTokensRequest();
    message.namespace = object.namespace ?? undefined;
    return message;
  },
};

function createBaseListTokensResponse(): ListTokensResponse {
  return { tokens: [] };
}

export const ListTokensResponse: MessageFns<ListTokensResponse> = {
  encode(message: ListTokensResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tokens) {
      RepoToken.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTokensResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokens.push(RepoToken.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTokensResponse {
    return { tokens: gt.Array.isArray(object?.tokens) ? object.tokens.map((e: any) => RepoToken.fromJSON(e)) : [] };
  },

  toJSON(message: ListTokensResponse): unknown {
    const obj: any = {};
    if (message.tokens?.length) {
      obj.tokens = message.tokens.map((e) => RepoToken.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTokensResponse>): ListTokensResponse {
    return ListTokensResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTokensResponse>): ListTokensResponse {
    const message = createBaseListTokensResponse();
    message.tokens = object.tokens?.map((e) => RepoToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddTokenRequest(): AddTokenRequest {
  return { token: undefined };
}

export const AddTokenRequest: MessageFns<AddTokenRequest> = {
  encode(message: AddTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      RepoToken.encode(message.token, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = RepoToken.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTokenRequest {
    return { token: isSet(object.token) ? RepoToken.fromJSON(object.token) : undefined };
  },

  toJSON(message: AddTokenRequest): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = RepoToken.toJSON(message.token);
    }
    return obj;
  },

  create(base?: DeepPartial<AddTokenRequest>): AddTokenRequest {
    return AddTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddTokenRequest>): AddTokenRequest {
    const message = createBaseAddTokenRequest();
    message.token = (object.token !== undefined && object.token !== null)
      ? RepoToken.fromPartial(object.token)
      : undefined;
    return message;
  },
};

function createBaseAddTokenResponse(): AddTokenResponse {
  return { token: undefined };
}

export const AddTokenResponse: MessageFns<AddTokenResponse> = {
  encode(message: AddTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      RepoToken.encode(message.token, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = RepoToken.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTokenResponse {
    return { token: isSet(object.token) ? RepoToken.fromJSON(object.token) : undefined };
  },

  toJSON(message: AddTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = RepoToken.toJSON(message.token);
    }
    return obj;
  },

  create(base?: DeepPartial<AddTokenResponse>): AddTokenResponse {
    return AddTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddTokenResponse>): AddTokenResponse {
    const message = createBaseAddTokenResponse();
    message.token = (object.token !== undefined && object.token !== null)
      ? RepoToken.fromPartial(object.token)
      : undefined;
    return message;
  },
};

function createBaseGetTokenResponse(): GetTokenResponse {
  return { token: undefined };
}

export const GetTokenResponse: MessageFns<GetTokenResponse> = {
  encode(message: GetTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      RepoToken.encode(message.token, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = RepoToken.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenResponse {
    return { token: isSet(object.token) ? RepoToken.fromJSON(object.token) : undefined };
  },

  toJSON(message: GetTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = RepoToken.toJSON(message.token);
    }
    return obj;
  },

  create(base?: DeepPartial<GetTokenResponse>): GetTokenResponse {
    return GetTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTokenResponse>): GetTokenResponse {
    const message = createBaseGetTokenResponse();
    message.token = (object.token !== undefined && object.token !== null)
      ? RepoToken.fromPartial(object.token)
      : undefined;
    return message;
  },
};

function createBaseUpdateTokenRequest(): UpdateTokenRequest {
  return { token: "" };
}

export const UpdateTokenRequest: MessageFns<UpdateTokenRequest> = {
  encode(message: UpdateTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTokenRequest {
    return { token: isSet(object.token) ? gt.String(object.token) : "" };
  },

  toJSON(message: UpdateTokenRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTokenRequest>): UpdateTokenRequest {
    return UpdateTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTokenRequest>): UpdateTokenRequest {
    const message = createBaseUpdateTokenRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseUpdateTokenResponse(): UpdateTokenResponse {
  return { token: undefined };
}

export const UpdateTokenResponse: MessageFns<UpdateTokenResponse> = {
  encode(message: UpdateTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      RepoToken.encode(message.token, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = RepoToken.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTokenResponse {
    return { token: isSet(object.token) ? RepoToken.fromJSON(object.token) : undefined };
  },

  toJSON(message: UpdateTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = RepoToken.toJSON(message.token);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTokenResponse>): UpdateTokenResponse {
    return UpdateTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTokenResponse>): UpdateTokenResponse {
    const message = createBaseUpdateTokenResponse();
    message.token = (object.token !== undefined && object.token !== null)
      ? RepoToken.fromPartial(object.token)
      : undefined;
    return message;
  },
};

function createBaseDeleteTokenResponse(): DeleteTokenResponse {
  return {};
}

export const DeleteTokenResponse: MessageFns<DeleteTokenResponse> = {
  encode(_: DeleteTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteTokenResponse {
    return {};
  },

  toJSON(_: DeleteTokenResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteTokenResponse>): DeleteTokenResponse {
    return DeleteTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteTokenResponse>): DeleteTokenResponse {
    const message = createBaseDeleteTokenResponse();
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
