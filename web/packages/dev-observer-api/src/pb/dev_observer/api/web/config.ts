// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: dev_observer/api/web/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GlobalConfig, UserManagementStatus } from "../types/config";

export const protobufPackage = "dev_observer.api.web.config";

export interface GetGlobalConfigResponse {
  config: GlobalConfig | undefined;
}

export interface UpdateGlobalConfigRequest {
  config: GlobalConfig | undefined;
}

export interface UpdateGlobalConfigResponse {
  config: GlobalConfig | undefined;
}

export interface GetUserManagementStatusResponse {
  status: UserManagementStatus | undefined;
}

function createBaseGetGlobalConfigResponse(): GetGlobalConfigResponse {
  return { config: undefined };
}

export const GetGlobalConfigResponse: MessageFns<GetGlobalConfigResponse> = {
  encode(message: GetGlobalConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      GlobalConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGlobalConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGlobalConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = GlobalConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGlobalConfigResponse {
    return { config: isSet(object.config) ? GlobalConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: GetGlobalConfigResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = GlobalConfig.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<GetGlobalConfigResponse>): GetGlobalConfigResponse {
    return GetGlobalConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGlobalConfigResponse>): GetGlobalConfigResponse {
    const message = createBaseGetGlobalConfigResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? GlobalConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseUpdateGlobalConfigRequest(): UpdateGlobalConfigRequest {
  return { config: undefined };
}

export const UpdateGlobalConfigRequest: MessageFns<UpdateGlobalConfigRequest> = {
  encode(message: UpdateGlobalConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      GlobalConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGlobalConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGlobalConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = GlobalConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGlobalConfigRequest {
    return { config: isSet(object.config) ? GlobalConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: UpdateGlobalConfigRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = GlobalConfig.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGlobalConfigRequest>): UpdateGlobalConfigRequest {
    return UpdateGlobalConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGlobalConfigRequest>): UpdateGlobalConfigRequest {
    const message = createBaseUpdateGlobalConfigRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? GlobalConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseUpdateGlobalConfigResponse(): UpdateGlobalConfigResponse {
  return { config: undefined };
}

export const UpdateGlobalConfigResponse: MessageFns<UpdateGlobalConfigResponse> = {
  encode(message: UpdateGlobalConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      GlobalConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGlobalConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGlobalConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = GlobalConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGlobalConfigResponse {
    return { config: isSet(object.config) ? GlobalConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: UpdateGlobalConfigResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = GlobalConfig.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGlobalConfigResponse>): UpdateGlobalConfigResponse {
    return UpdateGlobalConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGlobalConfigResponse>): UpdateGlobalConfigResponse {
    const message = createBaseUpdateGlobalConfigResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? GlobalConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseGetUserManagementStatusResponse(): GetUserManagementStatusResponse {
  return { status: undefined };
}

export const GetUserManagementStatusResponse: MessageFns<GetUserManagementStatusResponse> = {
  encode(message: GetUserManagementStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      UserManagementStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserManagementStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserManagementStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = UserManagementStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserManagementStatusResponse {
    return { status: isSet(object.status) ? UserManagementStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: GetUserManagementStatusResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = UserManagementStatus.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<GetUserManagementStatusResponse>): GetUserManagementStatusResponse {
    return GetUserManagementStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserManagementStatusResponse>): GetUserManagementStatusResponse {
    const message = createBaseGetUserManagementStatusResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? UserManagementStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
